/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 126.0, "minX": 0.0, "maxY": 3602.0, "series": [{"data": [[0.0, 126.0], [0.1, 436.0], [0.2, 475.0], [0.3, 490.0], [0.4, 501.0], [0.5, 510.0], [0.6, 517.0], [0.7, 524.0], [0.8, 529.0], [0.9, 533.0], [1.0, 537.0], [1.1, 541.0], [1.2, 544.0], [1.3, 547.0], [1.4, 550.0], [1.5, 553.0], [1.6, 555.0], [1.7, 557.0], [1.8, 559.0], [1.9, 561.0], [2.0, 563.0], [2.1, 565.0], [2.2, 567.0], [2.3, 569.0], [2.4, 570.0], [2.5, 572.0], [2.6, 573.0], [2.7, 575.0], [2.8, 576.0], [2.9, 577.0], [3.0, 578.0], [3.1, 579.0], [3.2, 580.0], [3.3, 582.0], [3.4, 583.0], [3.5, 584.0], [3.6, 585.0], [3.7, 586.0], [3.8, 587.0], [3.9, 588.0], [4.0, 589.0], [4.1, 590.0], [4.2, 591.0], [4.3, 591.0], [4.4, 592.0], [4.5, 593.0], [4.6, 594.0], [4.7, 594.0], [4.8, 595.0], [4.9, 596.0], [5.0, 597.0], [5.1, 598.0], [5.2, 598.0], [5.3, 599.0], [5.4, 600.0], [5.5, 600.0], [5.6, 601.0], [5.7, 602.0], [5.8, 602.0], [5.9, 603.0], [6.0, 604.0], [6.1, 604.0], [6.2, 605.0], [6.3, 606.0], [6.4, 606.0], [6.5, 607.0], [6.6, 607.0], [6.7, 608.0], [6.8, 608.0], [6.9, 609.0], [7.0, 609.0], [7.1, 610.0], [7.2, 610.0], [7.3, 611.0], [7.4, 611.0], [7.5, 612.0], [7.6, 612.0], [7.7, 613.0], [7.8, 613.0], [7.9, 614.0], [8.0, 614.0], [8.1, 615.0], [8.2, 615.0], [8.3, 616.0], [8.4, 616.0], [8.5, 617.0], [8.6, 617.0], [8.7, 618.0], [8.8, 618.0], [8.9, 618.0], [9.0, 619.0], [9.1, 619.0], [9.2, 620.0], [9.3, 620.0], [9.4, 620.0], [9.5, 621.0], [9.6, 621.0], [9.7, 622.0], [9.8, 622.0], [9.9, 622.0], [10.0, 623.0], [10.1, 623.0], [10.2, 623.0], [10.3, 624.0], [10.4, 624.0], [10.5, 624.0], [10.6, 625.0], [10.7, 625.0], [10.8, 625.0], [10.9, 626.0], [11.0, 626.0], [11.1, 627.0], [11.2, 627.0], [11.3, 627.0], [11.4, 628.0], [11.5, 628.0], [11.6, 628.0], [11.7, 629.0], [11.8, 629.0], [11.9, 629.0], [12.0, 630.0], [12.1, 630.0], [12.2, 631.0], [12.3, 631.0], [12.4, 631.0], [12.5, 632.0], [12.6, 632.0], [12.7, 632.0], [12.8, 633.0], [12.9, 633.0], [13.0, 633.0], [13.1, 634.0], [13.2, 634.0], [13.3, 634.0], [13.4, 634.0], [13.5, 635.0], [13.6, 635.0], [13.7, 635.0], [13.8, 636.0], [13.9, 636.0], [14.0, 636.0], [14.1, 637.0], [14.2, 637.0], [14.3, 637.0], [14.4, 638.0], [14.5, 638.0], [14.6, 638.0], [14.7, 639.0], [14.8, 639.0], [14.9, 639.0], [15.0, 639.0], [15.1, 640.0], [15.2, 640.0], [15.3, 640.0], [15.4, 641.0], [15.5, 641.0], [15.6, 641.0], [15.7, 641.0], [15.8, 642.0], [15.9, 642.0], [16.0, 642.0], [16.1, 643.0], [16.2, 643.0], [16.3, 643.0], [16.4, 644.0], [16.5, 644.0], [16.6, 644.0], [16.7, 644.0], [16.8, 645.0], [16.9, 645.0], [17.0, 645.0], [17.1, 646.0], [17.2, 646.0], [17.3, 646.0], [17.4, 646.0], [17.5, 647.0], [17.6, 647.0], [17.7, 647.0], [17.8, 647.0], [17.9, 648.0], [18.0, 648.0], [18.1, 648.0], [18.2, 648.0], [18.3, 649.0], [18.4, 649.0], [18.5, 649.0], [18.6, 650.0], [18.7, 650.0], [18.8, 650.0], [18.9, 650.0], [19.0, 651.0], [19.1, 651.0], [19.2, 651.0], [19.3, 651.0], [19.4, 652.0], [19.5, 652.0], [19.6, 652.0], [19.7, 652.0], [19.8, 653.0], [19.9, 653.0], [20.0, 653.0], [20.1, 653.0], [20.2, 654.0], [20.3, 654.0], [20.4, 654.0], [20.5, 654.0], [20.6, 654.0], [20.7, 655.0], [20.8, 655.0], [20.9, 655.0], [21.0, 655.0], [21.1, 656.0], [21.2, 656.0], [21.3, 656.0], [21.4, 656.0], [21.5, 657.0], [21.6, 657.0], [21.7, 657.0], [21.8, 657.0], [21.9, 658.0], [22.0, 658.0], [22.1, 658.0], [22.2, 658.0], [22.3, 658.0], [22.4, 659.0], [22.5, 659.0], [22.6, 659.0], [22.7, 659.0], [22.8, 660.0], [22.9, 660.0], [23.0, 660.0], [23.1, 660.0], [23.2, 660.0], [23.3, 661.0], [23.4, 661.0], [23.5, 661.0], [23.6, 661.0], [23.7, 661.0], [23.8, 662.0], [23.9, 662.0], [24.0, 662.0], [24.1, 662.0], [24.2, 662.0], [24.3, 663.0], [24.4, 663.0], [24.5, 663.0], [24.6, 663.0], [24.7, 663.0], [24.8, 664.0], [24.9, 664.0], [25.0, 664.0], [25.1, 664.0], [25.2, 664.0], [25.3, 665.0], [25.4, 665.0], [25.5, 665.0], [25.6, 665.0], [25.7, 665.0], [25.8, 665.0], [25.9, 666.0], [26.0, 666.0], [26.1, 666.0], [26.2, 666.0], [26.3, 667.0], [26.4, 667.0], [26.5, 667.0], [26.6, 667.0], [26.7, 667.0], [26.8, 668.0], [26.9, 668.0], [27.0, 668.0], [27.1, 668.0], [27.2, 668.0], [27.3, 668.0], [27.4, 669.0], [27.5, 669.0], [27.6, 669.0], [27.7, 669.0], [27.8, 669.0], [27.9, 670.0], [28.0, 670.0], [28.1, 670.0], [28.2, 670.0], [28.3, 670.0], [28.4, 671.0], [28.5, 671.0], [28.6, 671.0], [28.7, 671.0], [28.8, 671.0], [28.9, 672.0], [29.0, 672.0], [29.1, 672.0], [29.2, 672.0], [29.3, 672.0], [29.4, 673.0], [29.5, 673.0], [29.6, 673.0], [29.7, 673.0], [29.8, 673.0], [29.9, 674.0], [30.0, 674.0], [30.1, 674.0], [30.2, 674.0], [30.3, 674.0], [30.4, 675.0], [30.5, 675.0], [30.6, 675.0], [30.7, 675.0], [30.8, 675.0], [30.9, 676.0], [31.0, 676.0], [31.1, 676.0], [31.2, 676.0], [31.3, 676.0], [31.4, 677.0], [31.5, 677.0], [31.6, 677.0], [31.7, 677.0], [31.8, 677.0], [31.9, 677.0], [32.0, 678.0], [32.1, 678.0], [32.2, 678.0], [32.3, 678.0], [32.4, 678.0], [32.5, 679.0], [32.6, 679.0], [32.7, 679.0], [32.8, 679.0], [32.9, 679.0], [33.0, 679.0], [33.1, 680.0], [33.2, 680.0], [33.3, 680.0], [33.4, 680.0], [33.5, 680.0], [33.6, 681.0], [33.7, 681.0], [33.8, 681.0], [33.9, 681.0], [34.0, 681.0], [34.1, 682.0], [34.2, 682.0], [34.3, 682.0], [34.4, 682.0], [34.5, 682.0], [34.6, 682.0], [34.7, 683.0], [34.8, 683.0], [34.9, 683.0], [35.0, 683.0], [35.1, 683.0], [35.2, 683.0], [35.3, 684.0], [35.4, 684.0], [35.5, 684.0], [35.6, 684.0], [35.7, 684.0], [35.8, 685.0], [35.9, 685.0], [36.0, 685.0], [36.1, 685.0], [36.2, 685.0], [36.3, 685.0], [36.4, 686.0], [36.5, 686.0], [36.6, 686.0], [36.7, 686.0], [36.8, 686.0], [36.9, 687.0], [37.0, 687.0], [37.1, 687.0], [37.2, 687.0], [37.3, 687.0], [37.4, 687.0], [37.5, 688.0], [37.6, 688.0], [37.7, 688.0], [37.8, 688.0], [37.9, 688.0], [38.0, 689.0], [38.1, 689.0], [38.2, 689.0], [38.3, 689.0], [38.4, 689.0], [38.5, 689.0], [38.6, 690.0], [38.7, 690.0], [38.8, 690.0], [38.9, 690.0], [39.0, 690.0], [39.1, 690.0], [39.2, 691.0], [39.3, 691.0], [39.4, 691.0], [39.5, 691.0], [39.6, 691.0], [39.7, 691.0], [39.8, 692.0], [39.9, 692.0], [40.0, 692.0], [40.1, 692.0], [40.2, 692.0], [40.3, 692.0], [40.4, 693.0], [40.5, 693.0], [40.6, 693.0], [40.7, 693.0], [40.8, 693.0], [40.9, 693.0], [41.0, 694.0], [41.1, 694.0], [41.2, 694.0], [41.3, 694.0], [41.4, 694.0], [41.5, 694.0], [41.6, 695.0], [41.7, 695.0], [41.8, 695.0], [41.9, 695.0], [42.0, 695.0], [42.1, 695.0], [42.2, 696.0], [42.3, 696.0], [42.4, 696.0], [42.5, 696.0], [42.6, 696.0], [42.7, 696.0], [42.8, 697.0], [42.9, 697.0], [43.0, 697.0], [43.1, 697.0], [43.2, 697.0], [43.3, 697.0], [43.4, 698.0], [43.5, 698.0], [43.6, 698.0], [43.7, 698.0], [43.8, 698.0], [43.9, 698.0], [44.0, 699.0], [44.1, 699.0], [44.2, 699.0], [44.3, 699.0], [44.4, 699.0], [44.5, 700.0], [44.6, 700.0], [44.7, 700.0], [44.8, 700.0], [44.9, 700.0], [45.0, 700.0], [45.1, 701.0], [45.2, 701.0], [45.3, 701.0], [45.4, 701.0], [45.5, 701.0], [45.6, 701.0], [45.7, 702.0], [45.8, 702.0], [45.9, 702.0], [46.0, 702.0], [46.1, 702.0], [46.2, 702.0], [46.3, 703.0], [46.4, 703.0], [46.5, 703.0], [46.6, 703.0], [46.7, 703.0], [46.8, 703.0], [46.9, 704.0], [47.0, 704.0], [47.1, 704.0], [47.2, 704.0], [47.3, 704.0], [47.4, 704.0], [47.5, 705.0], [47.6, 705.0], [47.7, 705.0], [47.8, 705.0], [47.9, 705.0], [48.0, 705.0], [48.1, 706.0], [48.2, 706.0], [48.3, 706.0], [48.4, 706.0], [48.5, 706.0], [48.6, 706.0], [48.7, 707.0], [48.8, 707.0], [48.9, 707.0], [49.0, 707.0], [49.1, 707.0], [49.2, 707.0], [49.3, 708.0], [49.4, 708.0], [49.5, 708.0], [49.6, 708.0], [49.7, 708.0], [49.8, 708.0], [49.9, 709.0], [50.0, 709.0], [50.1, 709.0], [50.2, 709.0], [50.3, 709.0], [50.4, 709.0], [50.5, 710.0], [50.6, 710.0], [50.7, 710.0], [50.8, 710.0], [50.9, 710.0], [51.0, 710.0], [51.1, 711.0], [51.2, 711.0], [51.3, 711.0], [51.4, 711.0], [51.5, 711.0], [51.6, 711.0], [51.7, 712.0], [51.8, 712.0], [51.9, 712.0], [52.0, 712.0], [52.1, 712.0], [52.2, 712.0], [52.3, 713.0], [52.4, 713.0], [52.5, 713.0], [52.6, 713.0], [52.7, 713.0], [52.8, 713.0], [52.9, 714.0], [53.0, 714.0], [53.1, 714.0], [53.2, 714.0], [53.3, 714.0], [53.4, 714.0], [53.5, 715.0], [53.6, 715.0], [53.7, 715.0], [53.8, 715.0], [53.9, 715.0], [54.0, 715.0], [54.1, 716.0], [54.2, 716.0], [54.3, 716.0], [54.4, 716.0], [54.5, 716.0], [54.6, 716.0], [54.7, 717.0], [54.8, 717.0], [54.9, 717.0], [55.0, 717.0], [55.1, 717.0], [55.2, 717.0], [55.3, 718.0], [55.4, 718.0], [55.5, 718.0], [55.6, 718.0], [55.7, 718.0], [55.8, 718.0], [55.9, 719.0], [56.0, 719.0], [56.1, 719.0], [56.2, 719.0], [56.3, 719.0], [56.4, 719.0], [56.5, 720.0], [56.6, 720.0], [56.7, 720.0], [56.8, 720.0], [56.9, 720.0], [57.0, 720.0], [57.1, 721.0], [57.2, 721.0], [57.3, 721.0], [57.4, 721.0], [57.5, 721.0], [57.6, 721.0], [57.7, 722.0], [57.8, 722.0], [57.9, 722.0], [58.0, 722.0], [58.1, 722.0], [58.2, 722.0], [58.3, 723.0], [58.4, 723.0], [58.5, 723.0], [58.6, 723.0], [58.7, 723.0], [58.8, 724.0], [58.9, 724.0], [59.0, 724.0], [59.1, 724.0], [59.2, 724.0], [59.3, 724.0], [59.4, 725.0], [59.5, 725.0], [59.6, 725.0], [59.7, 725.0], [59.8, 725.0], [59.9, 725.0], [60.0, 726.0], [60.1, 726.0], [60.2, 726.0], [60.3, 726.0], [60.4, 726.0], [60.5, 726.0], [60.6, 727.0], [60.7, 727.0], [60.8, 727.0], [60.9, 727.0], [61.0, 727.0], [61.1, 727.0], [61.2, 728.0], [61.3, 728.0], [61.4, 728.0], [61.5, 728.0], [61.6, 728.0], [61.7, 729.0], [61.8, 729.0], [61.9, 729.0], [62.0, 729.0], [62.1, 729.0], [62.2, 729.0], [62.3, 730.0], [62.4, 730.0], [62.5, 730.0], [62.6, 730.0], [62.7, 730.0], [62.8, 731.0], [62.9, 731.0], [63.0, 731.0], [63.1, 731.0], [63.2, 731.0], [63.3, 731.0], [63.4, 732.0], [63.5, 732.0], [63.6, 732.0], [63.7, 732.0], [63.8, 732.0], [63.9, 732.0], [64.0, 733.0], [64.1, 733.0], [64.2, 733.0], [64.3, 733.0], [64.4, 733.0], [64.5, 733.0], [64.6, 734.0], [64.7, 734.0], [64.8, 734.0], [64.9, 734.0], [65.0, 734.0], [65.1, 735.0], [65.2, 735.0], [65.3, 735.0], [65.4, 735.0], [65.5, 735.0], [65.6, 736.0], [65.7, 736.0], [65.8, 736.0], [65.9, 736.0], [66.0, 736.0], [66.1, 736.0], [66.2, 737.0], [66.3, 737.0], [66.4, 737.0], [66.5, 737.0], [66.6, 737.0], [66.7, 738.0], [66.8, 738.0], [66.9, 738.0], [67.0, 738.0], [67.1, 738.0], [67.2, 739.0], [67.3, 739.0], [67.4, 739.0], [67.5, 739.0], [67.6, 739.0], [67.7, 739.0], [67.8, 740.0], [67.9, 740.0], [68.0, 740.0], [68.1, 740.0], [68.2, 740.0], [68.3, 741.0], [68.4, 741.0], [68.5, 741.0], [68.6, 741.0], [68.7, 741.0], [68.8, 742.0], [68.9, 742.0], [69.0, 742.0], [69.1, 742.0], [69.2, 742.0], [69.3, 742.0], [69.4, 743.0], [69.5, 743.0], [69.6, 743.0], [69.7, 743.0], [69.8, 743.0], [69.9, 744.0], [70.0, 744.0], [70.1, 744.0], [70.2, 744.0], [70.3, 744.0], [70.4, 745.0], [70.5, 745.0], [70.6, 745.0], [70.7, 745.0], [70.8, 745.0], [70.9, 746.0], [71.0, 746.0], [71.1, 746.0], [71.2, 746.0], [71.3, 746.0], [71.4, 747.0], [71.5, 747.0], [71.6, 747.0], [71.7, 747.0], [71.8, 747.0], [71.9, 748.0], [72.0, 748.0], [72.1, 748.0], [72.2, 748.0], [72.3, 748.0], [72.4, 749.0], [72.5, 749.0], [72.6, 749.0], [72.7, 749.0], [72.8, 749.0], [72.9, 749.0], [73.0, 750.0], [73.1, 750.0], [73.2, 750.0], [73.3, 750.0], [73.4, 750.0], [73.5, 751.0], [73.6, 751.0], [73.7, 751.0], [73.8, 751.0], [73.9, 752.0], [74.0, 752.0], [74.1, 752.0], [74.2, 752.0], [74.3, 752.0], [74.4, 753.0], [74.5, 753.0], [74.6, 753.0], [74.7, 753.0], [74.8, 753.0], [74.9, 754.0], [75.0, 754.0], [75.1, 754.0], [75.2, 754.0], [75.3, 754.0], [75.4, 755.0], [75.5, 755.0], [75.6, 755.0], [75.7, 755.0], [75.8, 756.0], [75.9, 756.0], [76.0, 756.0], [76.1, 756.0], [76.2, 756.0], [76.3, 757.0], [76.4, 757.0], [76.5, 757.0], [76.6, 757.0], [76.7, 758.0], [76.8, 758.0], [76.9, 758.0], [77.0, 758.0], [77.1, 758.0], [77.2, 759.0], [77.3, 759.0], [77.4, 759.0], [77.5, 759.0], [77.6, 760.0], [77.7, 760.0], [77.8, 760.0], [77.9, 760.0], [78.0, 761.0], [78.1, 761.0], [78.2, 761.0], [78.3, 761.0], [78.4, 761.0], [78.5, 762.0], [78.6, 762.0], [78.7, 762.0], [78.8, 762.0], [78.9, 763.0], [79.0, 763.0], [79.1, 763.0], [79.2, 763.0], [79.3, 764.0], [79.4, 764.0], [79.5, 764.0], [79.6, 764.0], [79.7, 765.0], [79.8, 765.0], [79.9, 765.0], [80.0, 765.0], [80.1, 766.0], [80.2, 766.0], [80.3, 766.0], [80.4, 766.0], [80.5, 766.0], [80.6, 767.0], [80.7, 767.0], [80.8, 767.0], [80.9, 768.0], [81.0, 768.0], [81.1, 768.0], [81.2, 768.0], [81.3, 769.0], [81.4, 769.0], [81.5, 769.0], [81.6, 769.0], [81.7, 770.0], [81.8, 770.0], [81.9, 770.0], [82.0, 770.0], [82.1, 771.0], [82.2, 771.0], [82.3, 771.0], [82.4, 771.0], [82.5, 772.0], [82.6, 772.0], [82.7, 772.0], [82.8, 773.0], [82.9, 773.0], [83.0, 773.0], [83.1, 773.0], [83.2, 774.0], [83.3, 774.0], [83.4, 774.0], [83.5, 775.0], [83.6, 775.0], [83.7, 775.0], [83.8, 775.0], [83.9, 776.0], [84.0, 776.0], [84.1, 776.0], [84.2, 777.0], [84.3, 777.0], [84.4, 777.0], [84.5, 778.0], [84.6, 778.0], [84.7, 778.0], [84.8, 778.0], [84.9, 779.0], [85.0, 779.0], [85.1, 779.0], [85.2, 780.0], [85.3, 780.0], [85.4, 780.0], [85.5, 780.0], [85.6, 781.0], [85.7, 781.0], [85.8, 781.0], [85.9, 782.0], [86.0, 782.0], [86.1, 782.0], [86.2, 783.0], [86.3, 783.0], [86.4, 783.0], [86.5, 784.0], [86.6, 784.0], [86.7, 784.0], [86.8, 785.0], [86.9, 785.0], [87.0, 785.0], [87.1, 786.0], [87.2, 786.0], [87.3, 786.0], [87.4, 787.0], [87.5, 787.0], [87.6, 788.0], [87.7, 788.0], [87.8, 788.0], [87.9, 789.0], [88.0, 789.0], [88.1, 789.0], [88.2, 790.0], [88.3, 790.0], [88.4, 791.0], [88.5, 791.0], [88.6, 791.0], [88.7, 792.0], [88.8, 792.0], [88.9, 792.0], [89.0, 793.0], [89.1, 793.0], [89.2, 794.0], [89.3, 794.0], [89.4, 794.0], [89.5, 795.0], [89.6, 795.0], [89.7, 796.0], [89.8, 796.0], [89.9, 796.0], [90.0, 797.0], [90.1, 797.0], [90.2, 798.0], [90.3, 798.0], [90.4, 799.0], [90.5, 799.0], [90.6, 799.0], [90.7, 800.0], [90.8, 800.0], [90.9, 801.0], [91.0, 801.0], [91.1, 802.0], [91.2, 802.0], [91.3, 802.0], [91.4, 803.0], [91.5, 803.0], [91.6, 804.0], [91.7, 804.0], [91.8, 805.0], [91.9, 806.0], [92.0, 806.0], [92.1, 807.0], [92.2, 807.0], [92.3, 808.0], [92.4, 808.0], [92.5, 809.0], [92.6, 809.0], [92.7, 810.0], [92.8, 810.0], [92.9, 811.0], [93.0, 812.0], [93.1, 812.0], [93.2, 813.0], [93.3, 813.0], [93.4, 814.0], [93.5, 815.0], [93.6, 815.0], [93.7, 816.0], [93.8, 817.0], [93.9, 818.0], [94.0, 818.0], [94.1, 819.0], [94.2, 820.0], [94.3, 821.0], [94.4, 821.0], [94.5, 822.0], [94.6, 823.0], [94.7, 824.0], [94.8, 825.0], [94.9, 826.0], [95.0, 827.0], [95.1, 828.0], [95.2, 829.0], [95.3, 830.0], [95.4, 831.0], [95.5, 832.0], [95.6, 833.0], [95.7, 834.0], [95.8, 835.0], [95.9, 836.0], [96.0, 838.0], [96.1, 839.0], [96.2, 840.0], [96.3, 841.0], [96.4, 842.0], [96.5, 844.0], [96.6, 846.0], [96.7, 848.0], [96.8, 850.0], [96.9, 851.0], [97.0, 854.0], [97.1, 856.0], [97.2, 859.0], [97.3, 862.0], [97.4, 865.0], [97.5, 869.0], [97.6, 874.0], [97.7, 881.0], [97.8, 892.0], [97.9, 907.0], [98.0, 1460.0], [98.1, 1496.0], [98.2, 1514.0], [98.3, 1528.0], [98.4, 1542.0], [98.5, 1553.0], [98.6, 1561.0], [98.7, 1569.0], [98.8, 1577.0], [98.9, 1586.0], [99.0, 1595.0], [99.1, 1605.0], [99.2, 1615.0], [99.3, 1627.0], [99.4, 1638.0], [99.5, 1652.0], [99.6, 1666.0], [99.7, 1683.0], [99.8, 1708.0], [99.9, 1741.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 100.0, "maxY": 572416.0, "series": [{"data": [[600.0, 485157.0], [700.0, 572416.0], [200.0, 223.0], [800.0, 89670.0], [3400.0, 38.0], [3500.0, 102.0], [900.0, 1340.0], [3600.0, 3.0], [300.0, 390.0], [1300.0, 18.0], [1400.0, 1850.0], [1500.0, 11606.0], [100.0, 81.0], [400.0, 4139.0], [1600.0, 8978.0], [1700.0, 2406.0], [1800.0, 236.0], [500.0, 61783.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4953.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1212167.0, "series": [{"data": [[0.0, 4953.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1212167.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 23316.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 289.7649547537882, "minX": 1.5396699E12, "maxY": 300.0, "series": [{"data": [[1.53967116E12, 300.0], [1.53967278E12, 300.0], [1.53967014E12, 300.0], [1.53967176E12, 300.0], [1.53967236E12, 300.0], [1.53967074E12, 300.0], [1.53967038E12, 300.0], [1.5396726E12, 300.0], [1.53967098E12, 300.0], [1.53966996E12, 300.0], [1.53967158E12, 300.0], [1.53967218E12, 300.0], [1.53967056E12, 300.0], [1.53967182E12, 300.0], [1.5396708E12, 300.0], [1.53967242E12, 300.0], [1.5396714E12, 300.0], [1.5396702E12, 300.0], [1.539672E12, 300.0], [1.53967164E12, 300.0], [1.53967224E12, 300.0], [1.53967062E12, 300.0], [1.53967284E12, 300.0], [1.53967002E12, 300.0], [1.53967122E12, 300.0], [1.53967086E12, 300.0], [1.53967146E12, 300.0], [1.53967206E12, 300.0], [1.53967044E12, 300.0], [1.53967104E12, 300.0], [1.53967266E12, 300.0], [1.5396723E12, 300.0], [1.53967068E12, 300.0], [1.53967026E12, 300.0], [1.53967128E12, 300.0], [1.5396729E12, 300.0], [1.53967188E12, 300.0], [1.53967248E12, 300.0], [1.53967008E12, 300.0], [1.53967212E12, 300.0], [1.5396705E12, 300.0], [1.53967272E12, 300.0], [1.5396711E12, 300.0], [1.5396717E12, 300.0], [1.5396699E12, 289.7649547537882], [1.53967134E12, 300.0], [1.53967194E12, 300.0], [1.53967032E12, 300.0], [1.53967092E12, 300.0], [1.53967254E12, 300.0], [1.53967152E12, 300.0]], "isOverall": false, "label": "G1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5396729E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 152.66666666666666, "minX": 23.0, "maxY": 808.4166666666665, "series": [{"data": [[23.0, 201.0], [24.0, 210.71428571428572], [25.0, 224.8], [26.0, 178.0], [27.0, 183.0], [28.0, 157.0], [29.0, 152.66666666666666], [33.0, 180.33333333333334], [34.0, 184.8], [35.0, 186.5], [36.0, 181.85714285714283], [37.0, 162.33333333333334], [38.0, 176.0], [40.0, 172.6], [43.0, 165.0], [44.0, 169.55555555555554], [45.0, 182.0], [46.0, 177.6], [47.0, 183.5], [48.0, 184.75], [49.0, 188.0], [50.0, 193.0], [51.0, 199.5], [54.0, 197.0], [55.0, 208.42857142857142], [56.0, 214.16666666666666], [57.0, 214.0], [58.0, 223.08333333333334], [60.0, 234.66666666666669], [61.0, 233.5], [62.0, 227.33333333333331], [63.0, 217.5], [64.0, 229.66666666666666], [65.0, 221.16666666666669], [66.0, 211.5], [68.0, 220.66666666666666], [69.0, 222.83333333333331], [70.0, 224.0], [71.0, 230.7], [72.0, 222.27272727272725], [73.0, 204.0], [74.0, 228.6], [75.0, 223.57142857142858], [76.0, 218.5], [77.0, 229.33333333333334], [78.0, 231.0], [79.0, 234.5], [80.0, 225.33333333333334], [81.0, 236.60000000000002], [83.0, 248.42857142857142], [84.0, 248.0], [85.0, 258.5], [86.0, 263.59999999999997], [87.0, 281.0], [89.0, 293.1666666666667], [90.0, 288.0], [91.0, 284.5], [92.0, 289.1428571428571], [93.0, 283.875], [95.0, 283.0], [96.0, 297.2], [97.0, 297.0], [99.0, 307.6], [100.0, 321.4285714285714], [101.0, 291.5], [103.0, 350.0], [104.0, 323.4], [106.0, 327.15], [108.0, 319.72727272727275], [109.0, 326.1666666666667], [110.0, 321.14285714285717], [112.0, 328.6666666666667], [114.0, 331.25], [116.0, 341.54545454545456], [119.0, 347.2857142857143], [121.0, 350.58333333333337], [123.0, 348.1111111111111], [124.0, 356.0], [125.0, 342.0], [126.0, 364.2], [127.0, 359.75], [128.0, 360.0], [129.0, 361.44444444444446], [132.0, 377.92307692307696], [133.0, 380.77777777777777], [134.0, 405.25], [136.0, 391.5], [138.0, 407.0], [139.0, 410.22222222222223], [141.0, 408.8], [143.0, 411.0], [144.0, 431.6666666666667], [145.0, 422.1428571428571], [146.0, 454.0], [148.0, 419.0], [149.0, 448.2857142857143], [151.0, 442.45454545454544], [153.0, 450.14285714285717], [154.0, 469.25], [158.0, 474.99999999999994], [159.0, 494.3333333333333], [161.0, 493.0], [162.0, 516.5454545454546], [163.0, 481.2857142857143], [164.0, 527.0833333333334], [166.0, 480.0], [167.0, 497.5], [168.0, 506.4], [169.0, 505.0], [171.0, 473.7142857142857], [172.0, 519.4166666666667], [175.0, 508.28571428571433], [177.0, 509.25], [178.0, 537.0], [179.0, 507.75], [180.0, 542.0000000000001], [181.0, 532.0], [182.0, 519.0], [183.0, 536.6923076923076], [185.0, 476.0], [186.0, 536.4411764705881], [189.0, 485.0625], [193.0, 516.5555555555555], [194.0, 518.25], [196.0, 529.0], [197.0, 554.4], [200.0, 540.3076923076923], [203.0, 556.2857142857143], [205.0, 571.3157894736843], [206.0, 589.75], [212.0, 617.6666666666666], [213.0, 631.1428571428571], [216.0, 656.4], [217.0, 682.0], [221.0, 669.0526315789473], [222.0, 727.9230769230769], [225.0, 696.0], [226.0, 698.7142857142858], [228.0, 681.0000000000001], [229.0, 734.6315789473683], [230.0, 764.5714285714286], [231.0, 780.5714285714286], [232.0, 696.5], [233.0, 705.3333333333334], [234.0, 742.5], [237.0, 721.4117647058822], [238.0, 739.5], [240.0, 708.5], [241.0, 748.8], [244.0, 716.2307692307693], [248.0, 749.0833333333334], [251.0, 694.1666666666666], [252.0, 788.2666666666667], [253.0, 719.0], [257.0, 730.6923076923076], [260.0, 704.8], [261.0, 723.6923076923077], [262.0, 785.9], [265.0, 707.8333333333333], [266.0, 762.1153846153845], [269.0, 724.3124999999999], [270.0, 766.5], [273.0, 721.3181818181819], [274.0, 774.1538461538462], [275.0, 781.7], [280.0, 763.5714285714284], [281.0, 796.6153846153846], [284.0, 784.0], [285.0, 788.7000000000002], [288.0, 787.4285714285714], [291.0, 758.5555555555555], [294.0, 759.5], [295.0, 788.5000000000001], [297.0, 753.1764705882351], [298.0, 808.4166666666665], [299.0, 776.8571428571429], [300.0, 724.358377518989]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[299.85958163097945, 724.1169733867966]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10600.333333333334, "minX": 1.5396699E12, "maxY": 2288697.3666666667, "series": [{"data": [[1.53967116E12, 2261305.15], [1.53967278E12, 2198825.65], [1.53967014E12, 2247269.9], [1.53967176E12, 2276264.2], [1.53967236E12, 2254003.8333333335], [1.53967074E12, 2270450.7], [1.53967038E12, 2214490.8], [1.5396726E12, 2262844.5], [1.53967098E12, 2281939.35], [1.53966996E12, 2253880.05], [1.53967158E12, 2239210.95], [1.53967218E12, 2221553.7], [1.53967056E12, 2257411.5], [1.53967182E12, 2273438.85], [1.5396708E12, 2244825.05], [1.53967242E12, 2271446.75], [1.5396714E12, 2224451.3], [1.5396702E12, 2234140.15], [1.539672E12, 2252974.55], [1.53967164E12, 2229703.2], [1.53967224E12, 2238774.816666667], [1.53967062E12, 2262661.533333333], [1.53967284E12, 2250474.25], [1.53967002E12, 2230246.5], [1.53967122E12, 2257502.05], [1.53967086E12, 2263025.6], [1.53967146E12, 2232148.05], [1.53967206E12, 2228496.3666666667], [1.53967044E12, 2270722.35], [1.53967104E12, 2275430.95], [1.53967266E12, 2270179.05], [1.5396723E12, 2288697.3666666667], [1.53967068E12, 2284964.466666667], [1.53967026E12, 2230155.95], [1.53967128E12, 2232872.45], [1.5396729E12, 488064.5], [1.53967188E12, 2232872.45], [1.53967248E12, 2255872.15], [1.53967008E12, 2230427.6], [1.53967212E12, 2247813.2], [1.5396705E12, 2242561.3], [1.53967272E12, 2257049.3], [1.5396711E12, 2257245.15], [1.5396717E12, 2285014.316666667], [1.5396699E12, 1540979.9], [1.53967134E12, 2244915.4166666665], [1.53967194E12, 2259403.6], [1.53967032E12, 2241836.9], [1.53967092E12, 2263659.45], [1.53967254E12, 2229974.85], [1.53967152E12, 2251887.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.53967116E12, 49113.566666666666], [1.53967278E12, 47756.566666666666], [1.53967014E12, 48808.73333333333], [1.53967176E12, 49457.73333333333], [1.53967236E12, 48958.2], [1.53967074E12, 49312.2], [1.53967038E12, 48096.8], [1.5396726E12, 49147.0], [1.53967098E12, 49573.76666666667], [1.53966996E12, 48952.3], [1.53967158E12, 48633.7], [1.53967218E12, 48250.2], [1.53967056E12, 49029.0], [1.53967182E12, 49377.1], [1.5396708E12, 48755.63333333333], [1.53967242E12, 49333.833333333336], [1.5396714E12, 48313.13333333333], [1.5396702E12, 48523.566666666666], [1.539672E12, 48932.63333333333], [1.53967164E12, 48427.2], [1.53967224E12, 48625.833333333336], [1.53967062E12, 49145.03333333333], [1.53967284E12, 48879.53333333333], [1.53967002E12, 48439.0], [1.53967122E12, 49030.96666666667], [1.53967086E12, 49150.933333333334], [1.53967146E12, 48480.3], [1.53967206E12, 48413.433333333334], [1.53967044E12, 49318.1], [1.53967104E12, 49420.36666666667], [1.53967266E12, 49306.3], [1.5396723E12, 49717.333333333336], [1.53967068E12, 49638.666666666664], [1.53967026E12, 48437.03333333333], [1.53967128E12, 48496.03333333333], [1.5396729E12, 10600.333333333334], [1.53967188E12, 48496.03333333333], [1.53967248E12, 48995.566666666666], [1.53967008E12, 48442.933333333334], [1.53967212E12, 48820.53333333333], [1.5396705E12, 48706.46666666667], [1.53967272E12, 49021.13333333333], [1.5396711E12, 49029.0], [1.5396717E12, 49644.566666666666], [1.5396699E12, 33468.73333333333], [1.53967134E12, 48777.26666666667], [1.53967194E12, 49072.26666666667], [1.53967032E12, 48690.73333333333], [1.53967092E12, 49164.7], [1.53967254E12, 48433.1], [1.53967152E12, 48909.03333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5396729E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 710.7392405063232, "minX": 1.5396699E12, "maxY": 739.7093851665813, "series": [{"data": [[1.53967116E12, 722.8261722660527], [1.53967278E12, 739.7093851665813], [1.53967014E12, 725.5165202675494], [1.53967176E12, 717.2735804040082], [1.53967236E12, 723.2300956053672], [1.53967074E12, 720.3004307250545], [1.53967038E12, 736.3543097808287], [1.5396726E12, 720.2612244898005], [1.53967098E12, 712.8989963105538], [1.53966996E12, 723.8043871278853], [1.53967158E12, 727.5314812568294], [1.53967218E12, 731.7615553925177], [1.53967056E12, 723.4247091857171], [1.53967182E12, 715.6795316047392], [1.5396708E12, 725.3878020249291], [1.53967242E12, 716.7029699023265], [1.5396714E12, 730.6135308963632], [1.5396702E12, 727.2327645604514], [1.539672E12, 724.4729713435937], [1.53967164E12, 731.4898473034413], [1.53967224E12, 730.3914256825067], [1.53967062E12, 720.2132938492952], [1.53967284E12, 725.9265309406985], [1.53967002E12, 729.3672350791726], [1.53967122E12, 721.1859532309135], [1.53967086E12, 718.6272807298315], [1.53967146E12, 732.710843373497], [1.53967206E12, 730.768980785636], [1.53967044E12, 717.4925629062519], [1.53967104E12, 717.1438974889579], [1.53967266E12, 717.0454708627439], [1.5396723E12, 710.7392405063232], [1.53967068E12, 710.9381933439013], [1.53967026E12, 733.417394128873], [1.53967128E12, 730.5045216756578], [1.5396729E12, 727.8025974025937], [1.53967188E12, 728.438906687211], [1.53967248E12, 722.9180347609714], [1.53967008E12, 731.858598570961], [1.53967212E12, 723.6984369964644], [1.5396705E12, 725.3453928773266], [1.53967272E12, 722.8663644387333], [1.5396711E12, 719.756678700361], [1.5396717E12, 713.5520738422571], [1.5396699E12, 728.4521095310884], [1.53967134E12, 725.5605999516181], [1.53967194E12, 722.2883937159363], [1.53967032E12, 725.2601583326616], [1.53967092E12, 722.1563662546453], [1.53967254E12, 732.3899784789074], [1.53967152E12, 721.6660501025368]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5396729E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 393.9831220285222, "minX": 1.5396699E12, "maxY": 426.85513013114604, "series": [{"data": [[1.53967116E12, 404.35426260360873], [1.53967278E12, 424.1217312523142], [1.53967014E12, 416.7200419050689], [1.53967176E12, 408.6828376014], [1.53967236E12, 405.37390535872066], [1.53967074E12, 405.54554518624946], [1.53967038E12, 414.17860647693647], [1.5396726E12, 410.70348139255657], [1.53967098E12, 402.37834728448445], [1.53966996E12, 413.15608051102834], [1.53967158E12, 415.41793036515674], [1.53967218E12, 425.2516100105981], [1.53967056E12, 406.8415563578012], [1.53967182E12, 406.31409567052793], [1.5396708E12, 415.36061473922086], [1.53967242E12, 411.1231811839765], [1.5396714E12, 420.20703411218545], [1.5396702E12, 413.9482430186877], [1.539672E12, 417.4183915437466], [1.53967164E12, 419.7400503573749], [1.53967224E12, 404.7974115267957], [1.53967062E12, 413.96166313177844], [1.53967284E12, 398.9455218475918], [1.53967002E12, 413.02890783597235], [1.53967122E12, 419.7663551401861], [1.53967086E12, 412.5597791293222], [1.53967146E12, 412.6016794450537], [1.53967206E12, 416.93492302067625], [1.53967044E12, 409.5053236033021], [1.53967104E12, 404.7674798042107], [1.53967266E12, 414.51346176857766], [1.5396723E12, 400.9055775316466], [1.53967068E12, 393.9831220285222], [1.53967026E12, 426.85513013114604], [1.53967128E12, 411.48010868242704], [1.5396729E12, 407.4682745825598], [1.53967188E12, 412.9445232977819], [1.53967248E12, 407.71083370127604], [1.53967008E12, 419.80273627801296], [1.53967212E12, 406.9518208185628], [1.5396705E12, 419.50625858030986], [1.53967272E12, 413.66127738104876], [1.5396711E12, 398.04584837545383], [1.5396717E12, 409.46290060610664], [1.5396699E12, 426.17834058056417], [1.53967134E12, 414.27413111845914], [1.53967194E12, 407.1104119910218], [1.53967032E12, 408.7589869941036], [1.53967092E12, 402.755710228408], [1.53967254E12, 412.36301620172753], [1.53967152E12, 415.5451365153416]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5396729E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5282097207522565, "minX": 1.5396699E12, "maxY": 1.7046783625731037, "series": [{"data": [[1.53967116E12, 0.5908781484002698], [1.53967278E12, 0.5401721368858861], [1.53967014E12, 0.5467402691594805], [1.53967176E12, 0.5913790361062534], [1.53967236E12, 0.6385072708283137], [1.53967074E12, 1.1957007258514811], [1.53967038E12, 0.5574501144913334], [1.5396726E12, 0.567386954781914], [1.53967098E12, 0.5550442337445939], [1.53966996E12, 0.5486722108392582], [1.53967158E12, 0.5916130858506243], [1.53967218E12, 0.5303252629004583], [1.53967056E12, 0.5499398315282787], [1.53967182E12, 0.5566176763452408], [1.5396708E12, 0.5518938324391902], [1.53967242E12, 0.5615706597568265], [1.5396714E12, 0.5282097207522565], [1.5396702E12, 0.5376727596968375], [1.539672E12, 0.5483300510429665], [1.53967164E12, 1.7046783625731037], [1.53967224E12, 0.5465722952477235], [1.53967062E12, 1.0763135779743094], [1.53967284E12, 0.8985676349883327], [1.53967002E12, 1.005805927730415], [1.53967122E12, 0.5828085516024202], [1.53967086E12, 0.5514564660691427], [1.53967146E12, 0.5921463632307026], [1.53967206E12, 0.5577446480074763], [1.53967044E12, 0.5557283566614863], [1.53967104E12, 1.4815153806359094], [1.53967266E12, 0.571417175222371], [1.5396723E12, 1.165268987341774], [1.53967068E12, 0.7145007923930285], [1.53967026E12, 0.5301473872264402], [1.53967128E12, 1.0736445111318442], [1.5396729E12, 0.5549165120593718], [1.53967188E12, 1.3498114278762265], [1.53967248E12, 0.5357845301649783], [1.53967008E12, 0.7266969795388097], [1.53967212E12, 0.5554705124073465], [1.5396705E12, 0.6263425664217097], [1.53967272E12, 0.5505897456471134], [1.5396711E12, 1.3200962695547576], [1.5396717E12, 0.7484451134968139], [1.5396699E12, 1.1725819720296171], [1.53967134E12, 1.0637851786146222], [1.53967194E12, 0.5625200384738687], [1.53967032E12, 0.5655949592051002], [1.53967092E12, 1.3373734949397933], [1.53967254E12, 0.5457830836074206], [1.53967152E12, 0.5747718042542892]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5396729E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 126.0, "minX": 1.5396699E12, "maxY": 3602.0, "series": [{"data": [[1.53967116E12, 1819.0], [1.53967278E12, 1722.0], [1.53967014E12, 1739.0], [1.53967176E12, 3563.0], [1.53967236E12, 3543.0], [1.53967074E12, 1769.0], [1.53967038E12, 1838.0], [1.5396726E12, 1821.0], [1.53967098E12, 3481.0], [1.53966996E12, 1815.0], [1.53967158E12, 1759.0], [1.53967218E12, 1786.0], [1.53967056E12, 1779.0], [1.53967182E12, 1736.0], [1.5396708E12, 1777.0], [1.53967242E12, 1814.0], [1.5396714E12, 1755.0], [1.5396702E12, 1840.0], [1.539672E12, 1695.0], [1.53967164E12, 1781.0], [1.53967224E12, 3450.0], [1.53967062E12, 3545.0], [1.53967284E12, 3438.0], [1.53967002E12, 1729.0], [1.53967122E12, 1814.0], [1.53967086E12, 1810.0], [1.53967146E12, 1848.0], [1.53967206E12, 3496.0], [1.53967044E12, 1739.0], [1.53967104E12, 1831.0], [1.53967266E12, 1852.0], [1.5396723E12, 3507.0], [1.53967068E12, 3552.0], [1.53967026E12, 1766.0], [1.53967128E12, 1799.0], [1.5396729E12, 1720.0], [1.53967188E12, 1786.0], [1.53967248E12, 1848.0], [1.53967008E12, 1822.0], [1.53967212E12, 1815.0], [1.5396705E12, 1778.0], [1.53967272E12, 1773.0], [1.5396711E12, 3602.0], [1.5396717E12, 3583.0], [1.5396699E12, 1772.0], [1.53967134E12, 3579.0], [1.53967194E12, 1813.0], [1.53967032E12, 1753.0], [1.53967092E12, 1791.0], [1.53967254E12, 1777.0], [1.53967152E12, 1700.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.53967116E12, 433.0], [1.53967278E12, 516.0], [1.53967014E12, 420.0], [1.53967176E12, 466.0], [1.53967236E12, 313.0], [1.53967074E12, 454.0], [1.53967038E12, 445.0], [1.5396726E12, 495.0], [1.53967098E12, 468.0], [1.53966996E12, 387.0], [1.53967158E12, 455.0], [1.53967218E12, 492.0], [1.53967056E12, 460.0], [1.53967182E12, 493.0], [1.5396708E12, 477.0], [1.53967242E12, 467.0], [1.5396714E12, 516.0], [1.5396702E12, 445.0], [1.539672E12, 489.0], [1.53967164E12, 441.0], [1.53967224E12, 403.0], [1.53967062E12, 463.0], [1.53967284E12, 421.0], [1.53967002E12, 383.0], [1.53967122E12, 473.0], [1.53967086E12, 460.0], [1.53967146E12, 477.0], [1.53967206E12, 448.0], [1.53967044E12, 516.0], [1.53967104E12, 357.0], [1.53967266E12, 475.0], [1.5396723E12, 354.0], [1.53967068E12, 400.0], [1.53967026E12, 433.0], [1.53967128E12, 480.0], [1.5396729E12, 435.0], [1.53967188E12, 438.0], [1.53967248E12, 476.0], [1.53967008E12, 415.0], [1.53967212E12, 336.0], [1.5396705E12, 456.0], [1.53967272E12, 500.0], [1.5396711E12, 409.0], [1.5396717E12, 398.0], [1.5396699E12, 126.0], [1.53967134E12, 439.0], [1.53967194E12, 454.0], [1.53967032E12, 428.0], [1.53967092E12, 388.0], [1.53967254E12, 463.0], [1.53967152E12, 492.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.53967116E12, 798.0], [1.53967278E12, 820.0], [1.53967014E12, 786.9000000000015], [1.53967176E12, 780.0], [1.53967236E12, 808.0], [1.53967074E12, 793.0], [1.53967038E12, 811.0], [1.5396726E12, 791.0], [1.53967098E12, 779.0], [1.53966996E12, 800.0], [1.53967158E12, 794.0], [1.53967218E12, 799.0], [1.53967056E12, 789.0], [1.53967182E12, 782.0], [1.5396708E12, 803.0], [1.53967242E12, 781.0], [1.5396714E12, 792.0], [1.5396702E12, 791.0], [1.539672E12, 796.0], [1.53967164E12, 801.0], [1.53967224E12, 806.0], [1.53967062E12, 795.0], [1.53967284E12, 813.0], [1.53967002E12, 799.0], [1.53967122E12, 790.0], [1.53967086E12, 789.0], [1.53967146E12, 802.0], [1.53967206E12, 801.0], [1.53967044E12, 778.0], [1.53967104E12, 794.0], [1.53967266E12, 784.0], [1.5396723E12, 787.0], [1.53967068E12, 781.0], [1.53967026E12, 800.0], [1.53967128E12, 789.0], [1.5396729E12, 818.0], [1.53967188E12, 795.0], [1.53967248E12, 791.0], [1.53967008E12, 806.0], [1.53967212E12, 781.0], [1.5396705E12, 793.0], [1.53967272E12, 782.0], [1.5396711E12, 786.0], [1.5396717E12, 788.0], [1.5396699E12, 828.0], [1.53967134E12, 806.0], [1.53967194E12, 774.0], [1.53967032E12, 799.0], [1.53967092E12, 807.0], [1.53967254E12, 804.0], [1.53967152E12, 802.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.53967116E12, 1629.0], [1.53967278E12, 1603.0], [1.53967014E12, 1628.0], [1.53967176E12, 1557.0], [1.53967236E12, 1604.0], [1.53967074E12, 1582.0], [1.53967038E12, 1604.0], [1.5396726E12, 1588.9900000000016], [1.53967098E12, 1610.9900000000016], [1.53966996E12, 1602.9900000000016], [1.53967158E12, 1576.0], [1.53967218E12, 1569.0], [1.53967056E12, 1578.0], [1.53967182E12, 1584.0], [1.5396708E12, 1570.0], [1.53967242E12, 1552.950000000008], [1.5396714E12, 1554.9900000000016], [1.5396702E12, 1572.0], [1.539672E12, 1555.0], [1.53967164E12, 1591.0], [1.53967224E12, 1647.0], [1.53967062E12, 1574.9900000000016], [1.53967284E12, 1649.0], [1.53967002E12, 1623.0], [1.53967122E12, 1522.0], [1.53967086E12, 1573.0], [1.53967146E12, 1671.9900000000016], [1.53967206E12, 1601.0], [1.53967044E12, 1557.0], [1.53967104E12, 1578.9900000000016], [1.53967266E12, 1542.0], [1.5396723E12, 1647.0], [1.53967068E12, 1597.9900000000016], [1.53967026E12, 1592.0], [1.53967128E12, 1641.0], [1.5396729E12, 1649.0], [1.53967188E12, 1607.0], [1.53967248E12, 1640.0], [1.53967008E12, 1627.0], [1.53967212E12, 1580.0], [1.5396705E12, 1571.0], [1.53967272E12, 1585.0], [1.5396711E12, 1614.9900000000016], [1.5396717E12, 1607.0], [1.5396699E12, 1560.0], [1.53967134E12, 1619.0], [1.53967194E12, 1603.0], [1.53967032E12, 1628.9900000000016], [1.53967092E12, 1613.0], [1.53967254E12, 1566.0], [1.53967152E12, 1537.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.53967116E12, 835.0], [1.53967278E12, 863.0], [1.53967014E12, 817.0], [1.53967176E12, 806.0], [1.53967236E12, 845.0], [1.53967074E12, 826.0], [1.53967038E12, 847.0], [1.5396726E12, 817.0], [1.53967098E12, 808.0], [1.53966996E12, 826.0], [1.53967158E12, 819.0], [1.53967218E12, 822.0], [1.53967056E12, 812.0], [1.53967182E12, 802.0], [1.5396708E12, 834.0], [1.53967242E12, 805.0], [1.5396714E12, 824.0], [1.5396702E12, 817.0], [1.539672E12, 816.0], [1.53967164E12, 823.0], [1.53967224E12, 834.0], [1.53967062E12, 815.0], [1.53967284E12, 846.0], [1.53967002E12, 824.9500000000007], [1.53967122E12, 817.0], [1.53967086E12, 810.0], [1.53967146E12, 838.0], [1.53967206E12, 821.0], [1.53967044E12, 801.0], [1.53967104E12, 833.0], [1.53967266E12, 810.9500000000007], [1.5396723E12, 819.0], [1.53967068E12, 812.0], [1.53967026E12, 826.0], [1.53967128E12, 828.0], [1.5396729E12, 849.0], [1.53967188E12, 824.0], [1.53967248E12, 828.0], [1.53967008E12, 829.0], [1.53967212E12, 832.0], [1.5396705E12, 823.0], [1.53967272E12, 804.0], [1.5396711E12, 808.0], [1.5396717E12, 823.0], [1.5396699E12, 858.0], [1.53967134E12, 839.0], [1.53967194E12, 802.0], [1.53967032E12, 824.0], [1.53967092E12, 844.0], [1.53967254E12, 829.0], [1.53967152E12, 824.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5396729E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 661.0, "minX": 1000.0, "maxY": 760.0, "series": [{"data": [[9000.0, 710.0], [5000.0, 715.0], [10000.0, 760.0], [11000.0, 701.0], [3000.0, 708.0], [6000.0, 732.0], [13000.0, 661.0], [7000.0, 730.0], [1000.0, 720.0], [2000.0, 709.0], [4000.0, 708.0], [8000.0, 731.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 13000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 339.5, "minX": 1000.0, "maxY": 445.5, "series": [{"data": [[9000.0, 390.0], [5000.0, 407.0], [10000.0, 445.5], [11000.0, 356.0], [3000.0, 408.0], [6000.0, 409.0], [13000.0, 339.5], [7000.0, 416.0], [1000.0, 413.0], [2000.0, 408.0], [4000.0, 406.0], [8000.0, 392.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 13000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 84.83333333333333, "minX": 1.5396699E12, "maxY": 421.3333333333333, "series": [{"data": [[1.53967116E12, 416.21666666666664], [1.53967278E12, 404.71666666666664], [1.53967014E12, 413.6333333333333], [1.53967176E12, 419.1333333333333], [1.53967236E12, 414.8833333333333], [1.53967074E12, 417.9], [1.53967038E12, 407.6], [1.5396726E12, 416.5], [1.53967098E12, 420.1166666666667], [1.53966996E12, 414.85], [1.53967158E12, 412.15], [1.53967218E12, 408.9], [1.53967056E12, 415.5], [1.53967182E12, 418.45], [1.5396708E12, 413.18333333333334], [1.53967242E12, 418.1], [1.5396714E12, 409.43333333333334], [1.5396702E12, 411.21666666666664], [1.539672E12, 414.68333333333334], [1.53967164E12, 410.4], [1.53967224E12, 412.0833333333333], [1.53967062E12, 416.48333333333335], [1.53967284E12, 414.23333333333335], [1.53967002E12, 410.5], [1.53967122E12, 415.51666666666665], [1.53967086E12, 416.53333333333336], [1.53967146E12, 410.85], [1.53967206E12, 410.28333333333336], [1.53967044E12, 417.95], [1.53967104E12, 418.81666666666666], [1.53967266E12, 417.85], [1.5396723E12, 421.3333333333333], [1.53967068E12, 420.6666666666667], [1.53967026E12, 410.48333333333335], [1.53967128E12, 410.98333333333335], [1.5396729E12, 84.83333333333333], [1.53967188E12, 410.98333333333335], [1.53967248E12, 415.21666666666664], [1.53967008E12, 410.53333333333336], [1.53967212E12, 413.73333333333335], [1.5396705E12, 412.76666666666665], [1.53967272E12, 415.43333333333334], [1.5396711E12, 415.5], [1.5396717E12, 420.71666666666664], [1.5396699E12, 288.6333333333333], [1.53967134E12, 413.3666666666667], [1.53967194E12, 415.8666666666667], [1.53967032E12, 412.6333333333333], [1.53967092E12, 416.65], [1.53967254E12, 410.45], [1.53967152E12, 414.48333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5396729E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 89.83333333333333, "minX": 1.5396699E12, "maxY": 421.3333333333333, "series": [{"data": [[1.53967116E12, 416.21666666666664], [1.53967278E12, 404.71666666666664], [1.53967014E12, 413.6333333333333], [1.53967176E12, 419.1333333333333], [1.53967236E12, 414.9], [1.53967074E12, 417.9], [1.53967038E12, 407.6], [1.5396726E12, 416.5], [1.53967098E12, 420.1166666666667], [1.53966996E12, 414.85], [1.53967158E12, 412.15], [1.53967218E12, 408.9], [1.53967056E12, 415.5], [1.53967182E12, 418.45], [1.5396708E12, 413.18333333333334], [1.53967242E12, 418.0833333333333], [1.5396714E12, 409.43333333333334], [1.5396702E12, 411.21666666666664], [1.539672E12, 414.68333333333334], [1.53967164E12, 410.4], [1.53967224E12, 412.0833333333333], [1.53967062E12, 416.48333333333335], [1.53967284E12, 414.23333333333335], [1.53967002E12, 410.5], [1.53967122E12, 415.51666666666665], [1.53967086E12, 416.53333333333336], [1.53967146E12, 410.85], [1.53967206E12, 410.28333333333336], [1.53967044E12, 417.95], [1.53967104E12, 418.81666666666666], [1.53967266E12, 417.85], [1.5396723E12, 421.3333333333333], [1.53967068E12, 420.6666666666667], [1.53967026E12, 410.48333333333335], [1.53967128E12, 410.98333333333335], [1.5396729E12, 89.83333333333333], [1.53967188E12, 410.98333333333335], [1.53967248E12, 415.21666666666664], [1.53967008E12, 410.53333333333336], [1.53967212E12, 413.73333333333335], [1.5396705E12, 412.76666666666665], [1.53967272E12, 415.43333333333334], [1.5396711E12, 415.5], [1.5396717E12, 420.71666666666664], [1.5396699E12, 283.6333333333333], [1.53967134E12, 413.3666666666667], [1.53967194E12, 415.8666666666667], [1.53967032E12, 412.6333333333333], [1.53967092E12, 416.65], [1.53967254E12, 410.45], [1.53967152E12, 414.48333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5396729E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 89.83333333333333, "minX": 1.5396699E12, "maxY": 421.3333333333333, "series": [{"data": [[1.53967116E12, 416.21666666666664], [1.53967278E12, 404.71666666666664], [1.53967014E12, 413.6333333333333], [1.53967176E12, 419.1333333333333], [1.53967236E12, 414.9], [1.53967074E12, 417.9], [1.53967038E12, 407.6], [1.5396726E12, 416.5], [1.53967098E12, 420.1166666666667], [1.53966996E12, 414.85], [1.53967158E12, 412.15], [1.53967218E12, 408.9], [1.53967056E12, 415.5], [1.53967182E12, 418.45], [1.5396708E12, 413.18333333333334], [1.53967242E12, 418.0833333333333], [1.5396714E12, 409.43333333333334], [1.5396702E12, 411.21666666666664], [1.539672E12, 414.68333333333334], [1.53967164E12, 410.4], [1.53967224E12, 412.0833333333333], [1.53967062E12, 416.48333333333335], [1.53967284E12, 414.23333333333335], [1.53967002E12, 410.5], [1.53967122E12, 415.51666666666665], [1.53967086E12, 416.53333333333336], [1.53967146E12, 410.85], [1.53967206E12, 410.28333333333336], [1.53967044E12, 417.95], [1.53967104E12, 418.81666666666666], [1.53967266E12, 417.85], [1.5396723E12, 421.3333333333333], [1.53967068E12, 420.6666666666667], [1.53967026E12, 410.48333333333335], [1.53967128E12, 410.98333333333335], [1.5396729E12, 89.83333333333333], [1.53967188E12, 410.98333333333335], [1.53967248E12, 415.21666666666664], [1.53967008E12, 410.53333333333336], [1.53967212E12, 413.73333333333335], [1.5396705E12, 412.76666666666665], [1.53967272E12, 415.43333333333334], [1.5396711E12, 415.5], [1.5396717E12, 420.71666666666664], [1.5396699E12, 283.6333333333333], [1.53967134E12, 413.3666666666667], [1.53967194E12, 415.8666666666667], [1.53967032E12, 412.6333333333333], [1.53967092E12, 416.65], [1.53967254E12, 410.45], [1.53967152E12, 414.48333333333335]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5396729E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 89.83333333333333, "minX": 1.5396699E12, "maxY": 421.3333333333333, "series": [{"data": [[1.53967116E12, 416.21666666666664], [1.53967278E12, 404.71666666666664], [1.53967014E12, 413.6333333333333], [1.53967176E12, 419.1333333333333], [1.53967236E12, 414.9], [1.53967074E12, 417.9], [1.53967038E12, 407.6], [1.5396726E12, 416.5], [1.53967098E12, 420.1166666666667], [1.53966996E12, 414.85], [1.53967158E12, 412.15], [1.53967218E12, 408.9], [1.53967056E12, 415.5], [1.53967182E12, 418.45], [1.5396708E12, 413.18333333333334], [1.53967242E12, 418.0833333333333], [1.5396714E12, 409.43333333333334], [1.5396702E12, 411.21666666666664], [1.539672E12, 414.68333333333334], [1.53967164E12, 410.4], [1.53967224E12, 412.0833333333333], [1.53967062E12, 416.48333333333335], [1.53967284E12, 414.23333333333335], [1.53967002E12, 410.5], [1.53967122E12, 415.51666666666665], [1.53967086E12, 416.53333333333336], [1.53967146E12, 410.85], [1.53967206E12, 410.28333333333336], [1.53967044E12, 417.95], [1.53967104E12, 418.81666666666666], [1.53967266E12, 417.85], [1.5396723E12, 421.3333333333333], [1.53967068E12, 420.6666666666667], [1.53967026E12, 410.48333333333335], [1.53967128E12, 410.98333333333335], [1.5396729E12, 89.83333333333333], [1.53967188E12, 410.98333333333335], [1.53967248E12, 415.21666666666664], [1.53967008E12, 410.53333333333336], [1.53967212E12, 413.73333333333335], [1.5396705E12, 412.76666666666665], [1.53967272E12, 415.43333333333334], [1.5396711E12, 415.5], [1.5396717E12, 420.71666666666664], [1.5396699E12, 283.6333333333333], [1.53967134E12, 413.3666666666667], [1.53967194E12, 415.8666666666667], [1.53967032E12, 412.6333333333333], [1.53967092E12, 416.65], [1.53967254E12, 410.45], [1.53967152E12, 414.48333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5396729E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

