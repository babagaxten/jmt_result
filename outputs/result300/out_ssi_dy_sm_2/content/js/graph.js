/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 7100.0, "series": [{"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 3.0], [0.8, 3.0], [0.9, 3.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 4.0], [1.8, 4.0], [1.9, 4.0], [2.0, 4.0], [2.1, 4.0], [2.2, 4.0], [2.3, 4.0], [2.4, 4.0], [2.5, 4.0], [2.6, 4.0], [2.7, 4.0], [2.8, 4.0], [2.9, 4.0], [3.0, 4.0], [3.1, 4.0], [3.2, 4.0], [3.3, 5.0], [3.4, 5.0], [3.5, 5.0], [3.6, 5.0], [3.7, 5.0], [3.8, 5.0], [3.9, 5.0], [4.0, 5.0], [4.1, 5.0], [4.2, 5.0], [4.3, 5.0], [4.4, 5.0], [4.5, 5.0], [4.6, 5.0], [4.7, 5.0], [4.8, 5.0], [4.9, 5.0], [5.0, 5.0], [5.1, 5.0], [5.2, 5.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 7.0], [8.1, 7.0], [8.2, 7.0], [8.3, 7.0], [8.4, 7.0], [8.5, 7.0], [8.6, 7.0], [8.7, 7.0], [8.8, 7.0], [8.9, 7.0], [9.0, 7.0], [9.1, 7.0], [9.2, 7.0], [9.3, 7.0], [9.4, 7.0], [9.5, 7.0], [9.6, 7.0], [9.7, 7.0], [9.8, 7.0], [9.9, 7.0], [10.0, 7.0], [10.1, 7.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 7.0], [10.9, 7.0], [11.0, 7.0], [11.1, 8.0], [11.2, 8.0], [11.3, 8.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 8.0], [14.3, 8.0], [14.4, 8.0], [14.5, 8.0], [14.6, 9.0], [14.7, 9.0], [14.8, 9.0], [14.9, 9.0], [15.0, 9.0], [15.1, 9.0], [15.2, 9.0], [15.3, 9.0], [15.4, 9.0], [15.5, 9.0], [15.6, 9.0], [15.7, 9.0], [15.8, 9.0], [15.9, 9.0], [16.0, 9.0], [16.1, 9.0], [16.2, 9.0], [16.3, 9.0], [16.4, 9.0], [16.5, 9.0], [16.6, 9.0], [16.7, 9.0], [16.8, 9.0], [16.9, 9.0], [17.0, 9.0], [17.1, 9.0], [17.2, 9.0], [17.3, 9.0], [17.4, 9.0], [17.5, 9.0], [17.6, 9.0], [17.7, 9.0], [17.8, 9.0], [17.9, 9.0], [18.0, 9.0], [18.1, 9.0], [18.2, 9.0], [18.3, 9.0], [18.4, 9.0], [18.5, 10.0], [18.6, 10.0], [18.7, 10.0], [18.8, 10.0], [18.9, 10.0], [19.0, 10.0], [19.1, 10.0], [19.2, 10.0], [19.3, 10.0], [19.4, 10.0], [19.5, 10.0], [19.6, 10.0], [19.7, 10.0], [19.8, 10.0], [19.9, 10.0], [20.0, 10.0], [20.1, 10.0], [20.2, 10.0], [20.3, 10.0], [20.4, 10.0], [20.5, 10.0], [20.6, 10.0], [20.7, 10.0], [20.8, 10.0], [20.9, 10.0], [21.0, 10.0], [21.1, 10.0], [21.2, 10.0], [21.3, 10.0], [21.4, 10.0], [21.5, 10.0], [21.6, 10.0], [21.7, 10.0], [21.8, 10.0], [21.9, 10.0], [22.0, 10.0], [22.1, 10.0], [22.2, 10.0], [22.3, 10.0], [22.4, 10.0], [22.5, 10.0], [22.6, 11.0], [22.7, 11.0], [22.8, 11.0], [22.9, 11.0], [23.0, 11.0], [23.1, 11.0], [23.2, 11.0], [23.3, 11.0], [23.4, 11.0], [23.5, 11.0], [23.6, 11.0], [23.7, 11.0], [23.8, 11.0], [23.9, 11.0], [24.0, 11.0], [24.1, 11.0], [24.2, 11.0], [24.3, 11.0], [24.4, 11.0], [24.5, 11.0], [24.6, 11.0], [24.7, 11.0], [24.8, 11.0], [24.9, 11.0], [25.0, 11.0], [25.1, 11.0], [25.2, 11.0], [25.3, 11.0], [25.4, 11.0], [25.5, 11.0], [25.6, 11.0], [25.7, 11.0], [25.8, 11.0], [25.9, 11.0], [26.0, 11.0], [26.1, 11.0], [26.2, 11.0], [26.3, 11.0], [26.4, 11.0], [26.5, 11.0], [26.6, 11.0], [26.7, 11.0], [26.8, 11.0], [26.9, 11.0], [27.0, 12.0], [27.1, 12.0], [27.2, 12.0], [27.3, 12.0], [27.4, 12.0], [27.5, 12.0], [27.6, 12.0], [27.7, 12.0], [27.8, 12.0], [27.9, 12.0], [28.0, 12.0], [28.1, 12.0], [28.2, 12.0], [28.3, 12.0], [28.4, 12.0], [28.5, 12.0], [28.6, 12.0], [28.7, 12.0], [28.8, 12.0], [28.9, 12.0], [29.0, 12.0], [29.1, 12.0], [29.2, 12.0], [29.3, 12.0], [29.4, 12.0], [29.5, 12.0], [29.6, 12.0], [29.7, 12.0], [29.8, 12.0], [29.9, 12.0], [30.0, 12.0], [30.1, 12.0], [30.2, 12.0], [30.3, 12.0], [30.4, 12.0], [30.5, 12.0], [30.6, 12.0], [30.7, 12.0], [30.8, 12.0], [30.9, 12.0], [31.0, 12.0], [31.1, 12.0], [31.2, 12.0], [31.3, 13.0], [31.4, 13.0], [31.5, 13.0], [31.6, 13.0], [31.7, 13.0], [31.8, 13.0], [31.9, 13.0], [32.0, 13.0], [32.1, 13.0], [32.2, 13.0], [32.3, 13.0], [32.4, 13.0], [32.5, 13.0], [32.6, 13.0], [32.7, 13.0], [32.8, 13.0], [32.9, 13.0], [33.0, 13.0], [33.1, 13.0], [33.2, 13.0], [33.3, 13.0], [33.4, 13.0], [33.5, 13.0], [33.6, 13.0], [33.7, 13.0], [33.8, 13.0], [33.9, 13.0], [34.0, 13.0], [34.1, 13.0], [34.2, 13.0], [34.3, 13.0], [34.4, 13.0], [34.5, 13.0], [34.6, 13.0], [34.7, 13.0], [34.8, 13.0], [34.9, 13.0], [35.0, 13.0], [35.1, 13.0], [35.2, 13.0], [35.3, 13.0], [35.4, 13.0], [35.5, 14.0], [35.6, 14.0], [35.7, 14.0], [35.8, 14.0], [35.9, 14.0], [36.0, 14.0], [36.1, 14.0], [36.2, 14.0], [36.3, 14.0], [36.4, 14.0], [36.5, 14.0], [36.6, 14.0], [36.7, 14.0], [36.8, 14.0], [36.9, 14.0], [37.0, 14.0], [37.1, 14.0], [37.2, 14.0], [37.3, 14.0], [37.4, 14.0], [37.5, 14.0], [37.6, 14.0], [37.7, 14.0], [37.8, 14.0], [37.9, 14.0], [38.0, 14.0], [38.1, 14.0], [38.2, 14.0], [38.3, 14.0], [38.4, 14.0], [38.5, 14.0], [38.6, 14.0], [38.7, 14.0], [38.8, 14.0], [38.9, 14.0], [39.0, 14.0], [39.1, 14.0], [39.2, 14.0], [39.3, 14.0], [39.4, 14.0], [39.5, 14.0], [39.6, 15.0], [39.7, 15.0], [39.8, 15.0], [39.9, 15.0], [40.0, 15.0], [40.1, 15.0], [40.2, 15.0], [40.3, 15.0], [40.4, 15.0], [40.5, 15.0], [40.6, 15.0], [40.7, 15.0], [40.8, 15.0], [40.9, 15.0], [41.0, 15.0], [41.1, 15.0], [41.2, 15.0], [41.3, 15.0], [41.4, 15.0], [41.5, 15.0], [41.6, 15.0], [41.7, 15.0], [41.8, 15.0], [41.9, 15.0], [42.0, 15.0], [42.1, 15.0], [42.2, 15.0], [42.3, 15.0], [42.4, 15.0], [42.5, 15.0], [42.6, 15.0], [42.7, 15.0], [42.8, 15.0], [42.9, 15.0], [43.0, 15.0], [43.1, 15.0], [43.2, 15.0], [43.3, 15.0], [43.4, 16.0], [43.5, 16.0], [43.6, 16.0], [43.7, 16.0], [43.8, 16.0], [43.9, 16.0], [44.0, 16.0], [44.1, 16.0], [44.2, 16.0], [44.3, 16.0], [44.4, 16.0], [44.5, 16.0], [44.6, 16.0], [44.7, 16.0], [44.8, 16.0], [44.9, 16.0], [45.0, 16.0], [45.1, 16.0], [45.2, 16.0], [45.3, 16.0], [45.4, 16.0], [45.5, 16.0], [45.6, 16.0], [45.7, 16.0], [45.8, 16.0], [45.9, 16.0], [46.0, 16.0], [46.1, 16.0], [46.2, 16.0], [46.3, 16.0], [46.4, 16.0], [46.5, 16.0], [46.6, 16.0], [46.7, 16.0], [46.8, 16.0], [46.9, 16.0], [47.0, 16.0], [47.1, 17.0], [47.2, 17.0], [47.3, 17.0], [47.4, 17.0], [47.5, 17.0], [47.6, 17.0], [47.7, 17.0], [47.8, 17.0], [47.9, 17.0], [48.0, 17.0], [48.1, 17.0], [48.2, 17.0], [48.3, 17.0], [48.4, 17.0], [48.5, 17.0], [48.6, 17.0], [48.7, 17.0], [48.8, 17.0], [48.9, 17.0], [49.0, 17.0], [49.1, 17.0], [49.2, 17.0], [49.3, 17.0], [49.4, 17.0], [49.5, 17.0], [49.6, 17.0], [49.7, 17.0], [49.8, 17.0], [49.9, 17.0], [50.0, 17.0], [50.1, 17.0], [50.2, 17.0], [50.3, 17.0], [50.4, 17.0], [50.5, 17.0], [50.6, 18.0], [50.7, 18.0], [50.8, 18.0], [50.9, 18.0], [51.0, 18.0], [51.1, 18.0], [51.2, 18.0], [51.3, 18.0], [51.4, 18.0], [51.5, 18.0], [51.6, 18.0], [51.7, 18.0], [51.8, 18.0], [51.9, 18.0], [52.0, 18.0], [52.1, 18.0], [52.2, 18.0], [52.3, 18.0], [52.4, 18.0], [52.5, 18.0], [52.6, 18.0], [52.7, 18.0], [52.8, 18.0], [52.9, 18.0], [53.0, 18.0], [53.1, 18.0], [53.2, 18.0], [53.3, 18.0], [53.4, 18.0], [53.5, 18.0], [53.6, 18.0], [53.7, 18.0], [53.8, 18.0], [53.9, 18.0], [54.0, 19.0], [54.1, 19.0], [54.2, 19.0], [54.3, 19.0], [54.4, 19.0], [54.5, 19.0], [54.6, 19.0], [54.7, 19.0], [54.8, 19.0], [54.9, 19.0], [55.0, 19.0], [55.1, 19.0], [55.2, 19.0], [55.3, 19.0], [55.4, 19.0], [55.5, 19.0], [55.6, 19.0], [55.7, 19.0], [55.8, 19.0], [55.9, 19.0], [56.0, 19.0], [56.1, 19.0], [56.2, 19.0], [56.3, 19.0], [56.4, 19.0], [56.5, 19.0], [56.6, 19.0], [56.7, 19.0], [56.8, 19.0], [56.9, 19.0], [57.0, 19.0], [57.1, 20.0], [57.2, 20.0], [57.3, 20.0], [57.4, 20.0], [57.5, 20.0], [57.6, 20.0], [57.7, 20.0], [57.8, 20.0], [57.9, 20.0], [58.0, 20.0], [58.1, 20.0], [58.2, 20.0], [58.3, 20.0], [58.4, 20.0], [58.5, 20.0], [58.6, 20.0], [58.7, 20.0], [58.8, 20.0], [58.9, 20.0], [59.0, 20.0], [59.1, 20.0], [59.2, 20.0], [59.3, 20.0], [59.4, 20.0], [59.5, 20.0], [59.6, 20.0], [59.7, 20.0], [59.8, 20.0], [59.9, 20.0], [60.0, 20.0], [60.1, 21.0], [60.2, 21.0], [60.3, 21.0], [60.4, 21.0], [60.5, 21.0], [60.6, 21.0], [60.7, 21.0], [60.8, 21.0], [60.9, 21.0], [61.0, 21.0], [61.1, 21.0], [61.2, 21.0], [61.3, 21.0], [61.4, 21.0], [61.5, 21.0], [61.6, 21.0], [61.7, 21.0], [61.8, 21.0], [61.9, 21.0], [62.0, 21.0], [62.1, 21.0], [62.2, 21.0], [62.3, 21.0], [62.4, 21.0], [62.5, 21.0], [62.6, 21.0], [62.7, 21.0], [62.8, 21.0], [62.9, 22.0], [63.0, 22.0], [63.1, 22.0], [63.2, 22.0], [63.3, 22.0], [63.4, 22.0], [63.5, 22.0], [63.6, 22.0], [63.7, 22.0], [63.8, 22.0], [63.9, 22.0], [64.0, 22.0], [64.1, 22.0], [64.2, 22.0], [64.3, 22.0], [64.4, 22.0], [64.5, 22.0], [64.6, 22.0], [64.7, 22.0], [64.8, 22.0], [64.9, 22.0], [65.0, 22.0], [65.1, 22.0], [65.2, 22.0], [65.3, 22.0], [65.4, 22.0], [65.5, 23.0], [65.6, 23.0], [65.7, 23.0], [65.8, 23.0], [65.9, 23.0], [66.0, 23.0], [66.1, 23.0], [66.2, 23.0], [66.3, 23.0], [66.4, 23.0], [66.5, 23.0], [66.6, 23.0], [66.7, 23.0], [66.8, 23.0], [66.9, 23.0], [67.0, 23.0], [67.1, 23.0], [67.2, 23.0], [67.3, 23.0], [67.4, 23.0], [67.5, 23.0], [67.6, 23.0], [67.7, 23.0], [67.8, 23.0], [67.9, 24.0], [68.0, 24.0], [68.1, 24.0], [68.2, 24.0], [68.3, 24.0], [68.4, 24.0], [68.5, 24.0], [68.6, 24.0], [68.7, 24.0], [68.8, 24.0], [68.9, 24.0], [69.0, 24.0], [69.1, 24.0], [69.2, 24.0], [69.3, 24.0], [69.4, 24.0], [69.5, 24.0], [69.6, 24.0], [69.7, 24.0], [69.8, 24.0], [69.9, 24.0], [70.0, 24.0], [70.1, 25.0], [70.2, 25.0], [70.3, 25.0], [70.4, 25.0], [70.5, 25.0], [70.6, 25.0], [70.7, 25.0], [70.8, 25.0], [70.9, 25.0], [71.0, 25.0], [71.1, 25.0], [71.2, 25.0], [71.3, 25.0], [71.4, 25.0], [71.5, 25.0], [71.6, 25.0], [71.7, 25.0], [71.8, 25.0], [71.9, 25.0], [72.0, 26.0], [72.1, 26.0], [72.2, 26.0], [72.3, 26.0], [72.4, 26.0], [72.5, 26.0], [72.6, 26.0], [72.7, 26.0], [72.8, 26.0], [72.9, 26.0], [73.0, 26.0], [73.1, 26.0], [73.2, 26.0], [73.3, 26.0], [73.4, 26.0], [73.5, 26.0], [73.6, 26.0], [73.7, 26.0], [73.8, 27.0], [73.9, 27.0], [74.0, 27.0], [74.1, 27.0], [74.2, 27.0], [74.3, 27.0], [74.4, 27.0], [74.5, 27.0], [74.6, 27.0], [74.7, 27.0], [74.8, 27.0], [74.9, 27.0], [75.0, 27.0], [75.1, 27.0], [75.2, 27.0], [75.3, 27.0], [75.4, 28.0], [75.5, 28.0], [75.6, 28.0], [75.7, 28.0], [75.8, 28.0], [75.9, 28.0], [76.0, 28.0], [76.1, 28.0], [76.2, 28.0], [76.3, 28.0], [76.4, 28.0], [76.5, 28.0], [76.6, 28.0], [76.7, 28.0], [76.8, 28.0], [76.9, 29.0], [77.0, 29.0], [77.1, 29.0], [77.2, 29.0], [77.3, 29.0], [77.4, 29.0], [77.5, 29.0], [77.6, 29.0], [77.7, 29.0], [77.8, 29.0], [77.9, 29.0], [78.0, 29.0], [78.1, 29.0], [78.2, 30.0], [78.3, 30.0], [78.4, 30.0], [78.5, 30.0], [78.6, 30.0], [78.7, 30.0], [78.8, 30.0], [78.9, 30.0], [79.0, 30.0], [79.1, 30.0], [79.2, 30.0], [79.3, 30.0], [79.4, 31.0], [79.5, 31.0], [79.6, 31.0], [79.7, 31.0], [79.8, 31.0], [79.9, 31.0], [80.0, 31.0], [80.1, 31.0], [80.2, 31.0], [80.3, 31.0], [80.4, 31.0], [80.5, 32.0], [80.6, 32.0], [80.7, 32.0], [80.8, 32.0], [80.9, 32.0], [81.0, 32.0], [81.1, 32.0], [81.2, 32.0], [81.3, 32.0], [81.4, 33.0], [81.5, 33.0], [81.6, 33.0], [81.7, 33.0], [81.8, 33.0], [81.9, 33.0], [82.0, 33.0], [82.1, 33.0], [82.2, 33.0], [82.3, 34.0], [82.4, 34.0], [82.5, 34.0], [82.6, 34.0], [82.7, 34.0], [82.8, 34.0], [82.9, 34.0], [83.0, 34.0], [83.1, 35.0], [83.2, 35.0], [83.3, 35.0], [83.4, 35.0], [83.5, 35.0], [83.6, 35.0], [83.7, 35.0], [83.8, 36.0], [83.9, 36.0], [84.0, 36.0], [84.1, 36.0], [84.2, 36.0], [84.3, 36.0], [84.4, 36.0], [84.5, 37.0], [84.6, 37.0], [84.7, 37.0], [84.8, 37.0], [84.9, 37.0], [85.0, 37.0], [85.1, 38.0], [85.2, 38.0], [85.3, 38.0], [85.4, 38.0], [85.5, 38.0], [85.6, 39.0], [85.7, 39.0], [85.8, 39.0], [85.9, 39.0], [86.0, 39.0], [86.1, 40.0], [86.2, 40.0], [86.3, 40.0], [86.4, 40.0], [86.5, 40.0], [86.6, 41.0], [86.7, 41.0], [86.8, 41.0], [86.9, 42.0], [87.0, 42.0], [87.1, 42.0], [87.2, 42.0], [87.3, 43.0], [87.4, 43.0], [87.5, 43.0], [87.6, 44.0], [87.7, 44.0], [87.8, 44.0], [87.9, 45.0], [88.0, 45.0], [88.1, 45.0], [88.2, 46.0], [88.3, 46.0], [88.4, 46.0], [88.5, 47.0], [88.6, 47.0], [88.7, 48.0], [88.8, 48.0], [88.9, 49.0], [89.0, 49.0], [89.1, 50.0], [89.2, 50.0], [89.3, 51.0], [89.4, 51.0], [89.5, 52.0], [89.6, 52.0], [89.7, 53.0], [89.8, 53.0], [89.9, 54.0], [90.0, 55.0], [90.1, 55.0], [90.2, 56.0], [90.3, 57.0], [90.4, 57.0], [90.5, 58.0], [90.6, 59.0], [90.7, 59.0], [90.8, 60.0], [90.9, 61.0], [91.0, 62.0], [91.1, 63.0], [91.2, 63.0], [91.3, 64.0], [91.4, 65.0], [91.5, 66.0], [91.6, 67.0], [91.7, 68.0], [91.8, 69.0], [91.9, 70.0], [92.0, 71.0], [92.1, 72.0], [92.2, 73.0], [92.3, 74.0], [92.4, 75.0], [92.5, 76.0], [92.6, 78.0], [92.7, 79.0], [92.8, 80.0], [92.9, 82.0], [93.0, 83.0], [93.1, 84.0], [93.2, 86.0], [93.3, 87.0], [93.4, 89.0], [93.5, 90.0], [93.6, 92.0], [93.7, 94.0], [93.8, 96.0], [93.9, 97.0], [94.0, 99.0], [94.1, 102.0], [94.2, 104.0], [94.3, 106.0], [94.4, 109.0], [94.5, 111.0], [94.6, 114.0], [94.7, 116.0], [94.8, 119.0], [94.9, 122.0], [95.0, 126.0], [95.1, 129.0], [95.2, 132.0], [95.3, 136.0], [95.4, 140.0], [95.5, 144.0], [95.6, 148.0], [95.7, 153.0], [95.8, 157.0], [95.9, 163.0], [96.0, 169.0], [96.1, 175.0], [96.2, 181.0], [96.3, 188.0], [96.4, 196.0], [96.5, 204.0], [96.6, 208.0], [96.7, 212.0], [96.8, 215.0], [96.9, 218.0], [97.0, 220.0], [97.1, 223.0], [97.2, 225.0], [97.3, 228.0], [97.4, 231.0], [97.5, 234.0], [97.6, 237.0], [97.7, 242.0], [97.8, 247.0], [97.9, 256.0], [98.0, 267.0], [98.1, 283.0], [98.2, 303.0], [98.3, 327.0], [98.4, 360.0], [98.5, 411.0], [98.6, 452.0], [98.7, 576.0], [98.8, 1007.0], [98.9, 1011.0], [99.0, 1013.0], [99.1, 1015.0], [99.2, 1017.0], [99.3, 1018.0], [99.4, 1020.0], [99.5, 1022.0], [99.6, 1025.0], [99.7, 1029.0], [99.8, 1035.0], [99.9, 1077.0], [100.0, 7100.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 4230132.0, "series": [{"data": [[0.0, 4230132.0], [600.0, 1004.0], [700.0, 431.0], [3000.0, 1121.0], [3100.0, 8.0], [200.0, 78333.0], [800.0, 399.0], [3200.0, 36.0], [900.0, 105.0], [1000.0, 52119.0], [1100.0, 361.0], [300.0, 13303.0], [1200.0, 2287.0], [1300.0, 34.0], [1400.0, 125.0], [1500.0, 1.0], [100.0, 109888.0], [400.0, 7850.0], [1600.0, 1.0], [7000.0, 100.0], [7100.0, 1.0], [1900.0, 1.0], [500.0, 2360.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 100.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4439564.0, "series": [{"data": [[0.0, 4439564.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 59167.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1169.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 100.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 239.36984691033567, "minX": 1.54054248E12, "maxY": 300.0, "series": [{"data": [[1.54054302E12, 300.0], [1.54054284E12, 300.0], [1.54054314E12, 239.36984691033567], [1.5405426E12, 300.0], [1.54054296E12, 300.0], [1.54054278E12, 300.0], [1.54054248E12, 280.2128668927076], [1.54054308E12, 299.9951030144988], [1.54054266E12, 300.0], [1.5405429E12, 300.0], [1.54054272E12, 300.0], [1.54054254E12, 300.0]], "isOverall": false, "label": "G1", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54054314E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.745762711864407, "minX": 1.0, "maxY": 104.21428571428574, "series": [{"data": [[2.0, 0.745762711864407], [3.0, 0.8066666666666666], [4.0, 34.314285714285695], [5.0, 1.1077844311377245], [6.0, 1.068181818181818], [7.0, 1.4594594594594592], [8.0, 1.5789473684210524], [9.0, 1.8705882352941186], [10.0, 2.2025316455696187], [11.0, 2.4807692307692304], [12.0, 2.857142857142857], [13.0, 2.8510638297872353], [14.0, 2.996138996138996], [15.0, 2.419463087248322], [16.0, 3.3545454545454545], [17.0, 2.7200000000000006], [18.0, 8.443396226415102], [19.0, 6.658536585365855], [20.0, 5.157894736842105], [21.0, 5.082051282051283], [22.0, 5.957295373665482], [23.0, 7.972972972972975], [24.0, 6.517241379310347], [25.0, 5.961267605633801], [26.0, 5.500000000000001], [27.0, 5.827751196172248], [28.0, 6.7530120481927725], [29.0, 7.009999999999998], [30.0, 7.285046728971961], [31.0, 7.228571428571429], [32.0, 7.331491712707188], [33.0, 11.16483516483517], [34.0, 7.404761904761901], [35.0, 5.1000000000000005], [36.0, 6.027999999999996], [37.0, 8.630872483221482], [38.0, 11.134146341463415], [39.0, 8.727272727272732], [40.0, 7.947019867549669], [41.0, 7.373390557939918], [42.0, 15.315789473684209], [43.0, 10.461538461538462], [44.0, 7.2554973821989535], [45.0, 10.580952380952384], [46.0, 11.597765363128492], [47.0, 11.271084337349397], [48.0, 11.570312500000005], [49.0, 7.0], [50.0, 9.891472868217058], [51.0, 11.329326923076929], [52.0, 10.876750700280107], [53.0, 7.6491935483871005], [54.0, 18.602040816326546], [55.0, 14.221238938053101], [56.0, 24.55681818181818], [57.0, 12.114074074074074], [58.0, 14.306640624999993], [59.0, 8.000000000000002], [60.0, 13.986486486486486], [61.0, 10.40316573556797], [62.0, 13.008333333333342], [63.0, 16.368421052631586], [64.0, 8.739130434782606], [65.0, 8.958724202626637], [66.0, 15.188679245283023], [67.0, 10.840223463687169], [68.0, 7.554054054054053], [69.0, 7.019230769230771], [70.0, 9.12601626016261], [71.0, 11.962264150943396], [72.0, 7.404411764705883], [73.0, 16.738095238095244], [74.0, 9.12300683371298], [75.0, 14.334316617502452], [76.0, 15.56000000000001], [77.0, 15.739811912225722], [78.0, 10.324825986078881], [79.0, 12.366972477064218], [80.0, 29.576000000000004], [81.0, 11.632564841498578], [82.0, 12.624551971326166], [83.0, 15.802173913043466], [84.0, 18.78343949044585], [85.0, 8.824175824175825], [86.0, 9.25373134328358], [87.0, 14.447058823529419], [88.0, 16.637717121588068], [89.0, 15.888], [90.0, 13.059308072487642], [91.0, 24.126582278481017], [92.0, 13.23622047244094], [93.0, 12.934240362811794], [94.0, 19.974025974025967], [95.0, 16.116363636363626], [96.0, 21.115384615384585], [97.0, 16.132283464566942], [98.0, 12.732997481108299], [99.0, 59.51020408163264], [100.0, 9.99272727272728], [101.0, 30.633928571428566], [102.0, 11.44976076555024], [103.0, 11.152439024390251], [104.0, 14.66075388026608], [105.0, 10.547979797979789], [106.0, 18.565363881401655], [107.0, 27.752688172043], [108.0, 17.735537190082656], [109.0, 14.678733031674202], [110.0, 25.622857142857136], [111.0, 13.871369294605806], [112.0, 13.424585876198796], [113.0, 59.56060606060608], [114.0, 14.486910994764402], [115.0, 16.284946236559126], [116.0, 17.082456140350878], [117.0, 35.64130434782608], [118.0, 22.029205607476637], [119.0, 9.102040816326536], [120.0, 17.42424242424242], [121.0, 11.961538461538463], [122.0, 15.843750000000002], [123.0, 19.835294117647056], [124.0, 17.331325301204817], [127.0, 15.961538461538453], [126.0, 21.372500000000016], [125.0, 29.14383561643834], [128.0, 12.71590909090909], [129.0, 19.674347158218126], [131.0, 19.396341463414632], [132.0, 21.833580980683504], [133.0, 26.339622641509436], [134.0, 24.715536105032825], [135.0, 45.74766355140187], [130.0, 11.516431924882626], [137.0, 17.73399558498898], [138.0, 51.960000000000015], [139.0, 21.76363636363636], [140.0, 27.247999999999983], [141.0, 17.660424469413247], [142.0, 11.085106382978722], [143.0, 34.6317204301075], [136.0, 40.849999999999994], [144.0, 25.374784110535415], [145.0, 22.52554744525548], [146.0, 18.758771929824572], [147.0, 16.128378378378365], [148.0, 15.792079207920793], [149.0, 16.186234817813766], [150.0, 17.33138116154226], [151.0, 18.875059157595835], [152.0, 22.45035971223023], [153.0, 17.199999999999996], [154.0, 19.08888888888889], [155.0, 24.4419642857143], [156.0, 27.87303436225979], [157.0, 20.343680709534365], [158.0, 26.26394052044609], [159.0, 17.952045133991536], [160.0, 22.043010752688176], [161.0, 29.32669789227172], [162.0, 20.554555680539952], [163.0, 16.617647058823543], [164.0, 17.451162790697676], [165.0, 20.354260089686107], [166.0, 17.34523809523809], [167.0, 26.261180679785323], [168.0, 23.472779369627503], [169.0, 30.74657534246575], [170.0, 24.811332503113356], [171.0, 27.446689113355777], [172.0, 17.477272727272723], [173.0, 24.870453095086155], [174.0, 38.00664451827242], [175.0, 13.975062344139651], [176.0, 25.240196078431378], [177.0, 49.49783549783552], [178.0, 35.45222929936307], [179.0, 22.919480519480516], [180.0, 33.03389830508473], [181.0, 11.544943820224718], [182.0, 22.28853754940711], [183.0, 29.048148148148144], [184.0, 31.58218125960064], [185.0, 23.101382488479253], [186.0, 20.930807248764417], [187.0, 31.835164835164846], [188.0, 45.831021437578784], [189.0, 25.643048128342215], [190.0, 26.814154200230128], [191.0, 21.367003367003377], [192.0, 19.546596858638736], [193.0, 38.66515837104074], [194.0, 10.30578512396694], [195.0, 33.203980099502516], [196.0, 17.968503937007885], [197.0, 19.05836236933797], [198.0, 12.349056603773588], [199.0, 28.502070869765284], [200.0, 64.63510848126232], [201.0, 27.170915958451378], [202.0, 27.939318577468235], [203.0, 27.427215189873376], [204.0, 16.518134715025916], [205.0, 104.21428571428574], [206.0, 17.44134078212292], [207.0, 28.059029514757423], [208.0, 30.30539609644081], [209.0, 30.999999999999996], [210.0, 37.46624999999998], [211.0, 90.30617977528082], [212.0, 38.46583442838372], [213.0, 25.81995661605202], [214.0, 20.65250965250965], [215.0, 23.407002188183803], [216.0, 45.87904967602592], [217.0, 21.88266666666666], [218.0, 18.104704097116834], [219.0, 22.30327868852457], [220.0, 35.126659856996945], [221.0, 31.79577464788733], [222.0, 28.854494902687655], [223.0, 31.338983050847453], [224.0, 28.732653061224465], [225.0, 27.10059171597633], [226.0, 29.824485373781126], [227.0, 36.145539906103295], [228.0, 47.855335968379514], [229.0, 34.079754601227], [230.0, 40.483013293943834], [231.0, 27.9413680781759], [232.0, 22.351351351351354], [233.0, 43.378787878787875], [234.0, 69.03455723542119], [235.0, 25.313166234514604], [236.0, 46.02279593518263], [237.0, 24.08533694547916], [238.0, 26.632894736842115], [239.0, 102.02300884955754], [240.0, 16.11322645290581], [247.0, 41.212921153178115], [245.0, 50.337337818356524], [244.0, 31.945312499999982], [243.0, 8.500000000000002], [242.0, 43.75303398058241], [241.0, 29.713498622589515], [246.0, 23.664270739742467], [248.0, 29.8936170212766], [249.0, 29.326530612244888], [250.0, 31.325980392156854], [251.0, 31.801115241635728], [252.0, 33.66615265998461], [253.0, 6.4649122807017525], [254.0, 47.47456709956705], [255.0, 24.271276595744673], [257.0, 24.076923076923084], [256.0, 36.14285714285715], [258.0, 37.21727210418107], [259.0, 42.093476419090635], [260.0, 32.66666666666668], [261.0, 86.89896373056997], [262.0, 32.841428571428565], [263.0, 37.39889196675897], [264.0, 15.307142857142862], [270.0, 41.45576407506698], [271.0, 18.521985815602847], [268.0, 46.02312312312303], [269.0, 60.10037878787882], [265.0, 100.49880095923257], [266.0, 21.447145877378432], [267.0, 17.719999999999995], [273.0, 33.189496096522376], [272.0, 36.6426756985605], [274.0, 30.628000000000014], [275.0, 47.446292134831396], [276.0, 59.5365269461078], [277.0, 30.16589192330037], [278.0, 43.521996303142345], [279.0, 31.4390462531373], [280.0, 39.89267886855244], [284.0, 40.09707529558183], [285.0, 40.87633262260128], [286.0, 40.17049742710122], [287.0, 20.33121019108279], [281.0, 17.0175953079179], [283.0, 72.37573616018852], [282.0, 24.16987179487178], [289.0, 24.058465855940092], [288.0, 37.81188997338072], [290.0, 46.742469470827544], [291.0, 39.84744744744745], [292.0, 20.119999999999997], [293.0, 45.63434429730886], [294.0, 39.08181135851869], [295.0, 40.87059038566976], [296.0, 42.394745820539136], [300.0, 43.07109222338407], [297.0, 56.10625], [298.0, 36.24858916478558], [299.0, 43.944431922343284], [1.0, 43.512195121951216]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[295.38374533329664, 42.45019377777339]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 261128.4, "minX": 1.54054248E12, "maxY": 5837162.383333334, "series": [{"data": [[1.54054302E12, 5727480.2], [1.54054284E12, 5837162.383333334], [1.54054314E12, 4193450.966666667], [1.5405426E12, 5651558.133333334], [1.54054296E12, 5657980.133333334], [1.54054278E12, 5811059.516666667], [1.54054248E12, 1935645.8], [1.54054308E12, 5703402.0], [1.54054266E12, 5726434.916666667], [1.5405429E12, 5811660.583333333], [1.54054272E12, 5675236.516666667], [1.54054254E12, 5646960.516666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.54054302E12, 772623.6], [1.54054284E12, 787456.9], [1.54054314E12, 565671.8], [1.5405426E12, 762416.8], [1.54054296E12, 763283.2], [1.54054278E12, 783953.3], [1.54054248E12, 261128.4], [1.54054308E12, 769363.2], [1.54054266E12, 772530.5], [1.5405429E12, 783968.5], [1.54054272E12, 765599.3], [1.54054254E12, 761814.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54054314E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 34.943345402272065, "minX": 1.54054248E12, "maxY": 43.60041294831335, "series": [{"data": [[1.54054302E12, 43.1040754247436], [1.54054284E12, 41.894549025474426], [1.54054314E12, 34.943345402272065], [1.5405426E12, 43.578004331152066], [1.54054296E12, 43.51843628262331], [1.54054278E12, 42.21928159937605], [1.54054248E12, 42.60214787758884], [1.54054308E12, 43.40778084816878], [1.54054266E12, 42.993167732414875], [1.5405429E12, 42.27045537164139], [1.54054272E12, 43.60041294831335], [1.54054254E12, 43.433440825620686]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54054314E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 34.57049917040224, "minX": 1.54054248E12, "maxY": 43.350504262619495, "series": [{"data": [[1.54054302E12, 42.78006772292229], [1.54054284E12, 41.66936818688523], [1.54054314E12, 34.57049917040224], [1.5405426E12, 43.350504262619495], [1.54054296E12, 43.29625250475873], [1.54054278E12, 42.04179481400214], [1.54054248E12, 42.34828795529663], [1.54054308E12, 43.056299281624526], [1.54054266E12, 42.80058780127861], [1.5405429E12, 41.91485834767295], [1.54054272E12, 43.343027526579114], [1.54054254E12, 43.25683423991021]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54054314E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 18.132779595209247, "minX": 1.54054248E12, "maxY": 23.881194879372625, "series": [{"data": [[1.54054302E12, 23.439554710727087], [1.54054284E12, 23.165502897760856], [1.54054314E12, 18.132779595209247], [1.5405426E12, 23.881194879372625], [1.54054296E12, 23.59613675681735], [1.54054278E12, 22.893904912860393], [1.54054248E12, 23.062355389339217], [1.54054308E12, 23.286267449987143], [1.54054266E12, 23.572021642891936], [1.5405429E12, 22.918321498678814], [1.54054272E12, 23.768538004149566], [1.54054254E12, 23.773136405467675]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54054314E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.54054248E12, "maxY": 7022.0, "series": [{"data": [[1.54054302E12, 3225.0], [1.54054284E12, 3109.0], [1.54054314E12, 7022.0], [1.5405426E12, 3075.0], [1.54054296E12, 3043.0], [1.54054278E12, 3053.0], [1.54054248E12, 3210.0], [1.54054308E12, 3074.0], [1.54054266E12, 3218.0], [1.5405429E12, 3236.0], [1.54054272E12, 3223.0], [1.54054254E12, 3227.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.54054302E12, 0.0], [1.54054284E12, 0.0], [1.54054314E12, 0.0], [1.5405426E12, 0.0], [1.54054296E12, 0.0], [1.54054278E12, 0.0], [1.54054248E12, 0.0], [1.54054308E12, 0.0], [1.54054266E12, 0.0], [1.5405429E12, 0.0], [1.54054272E12, 0.0], [1.54054254E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.54054302E12, 56.0], [1.54054284E12, 48.0], [1.54054314E12, 14.0], [1.5405426E12, 62.0], [1.54054296E12, 51.0], [1.54054278E12, 53.0], [1.54054248E12, 64.0], [1.54054308E12, 55.0], [1.54054266E12, 64.0], [1.5405429E12, 46.0], [1.54054272E12, 53.0], [1.54054254E12, 62.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.54054302E12, 1011.0], [1.54054284E12, 1014.0], [1.54054314E12, 42.0], [1.5405426E12, 1014.0], [1.54054296E12, 1019.0], [1.54054278E12, 1016.0], [1.54054248E12, 1007.9900000000016], [1.54054308E12, 1010.9900000000016], [1.54054266E12, 1012.0], [1.5405429E12, 1018.0], [1.54054272E12, 1016.0], [1.54054254E12, 619.8200000000288]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.54054302E12, 135.0], [1.54054284E12, 151.0], [1.54054314E12, 18.0], [1.5405426E12, 129.0], [1.54054296E12, 119.0], [1.54054278E12, 125.0], [1.54054248E12, 144.0], [1.54054308E12, 150.0], [1.54054266E12, 142.0], [1.5405429E12, 104.0], [1.54054272E12, 125.0], [1.54054254E12, 153.95000000000073]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54054314E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 1000.0, "maxY": 7017.5, "series": [{"data": [[9000.0, 13.0], [10000.0, 13.0], [11000.0, 13.0], [12000.0, 15.0], [13000.0, 17.0], [14000.0, 19.0], [15000.0, 19.0], [1000.0, 34.0], [16000.0, 19.0], [17000.0, 17.0], [18000.0, 18.0], [19000.0, 18.0], [20000.0, 22.0], [21000.0, 20.0], [22000.0, 21.0], [23000.0, 20.0], [24000.0, 20.0], [25000.0, 23.0], [26000.0, 17.0], [27000.0, 25.0], [28000.0, 23.0], [29000.0, 30.0], [30000.0, 19.5], [31000.0, 206.0], [2000.0, 29.0], [35000.0, 22.0], [37000.0, 31.0], [46000.0, 16.0], [3000.0, 25.0], [4000.0, 21.0], [5000.0, 19.0], [6000.0, 16.0], [7000.0, 15.0], [8000.0, 14.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9000.0, 7013.0], [10000.0, 7014.5], [11000.0, 7016.0], [12000.0, 7016.0], [3000.0, 7017.0], [13000.0, 7017.5], [14000.0, 7010.0], [4000.0, 7016.0], [1000.0, 7012.0], [5000.0, 7016.0], [6000.0, 7014.0], [7000.0, 7014.5], [8000.0, 7016.0], [2000.0, 7010.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 46000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1000.0, "maxY": 197.0, "series": [{"data": [[9000.0, 13.0], [10000.0, 13.0], [11000.0, 13.0], [12000.0, 14.0], [13000.0, 17.0], [14000.0, 19.0], [15000.0, 19.0], [1000.0, 34.0], [16000.0, 19.0], [17000.0, 17.0], [18000.0, 18.0], [19000.0, 18.0], [20000.0, 22.0], [21000.0, 20.0], [22000.0, 20.5], [23000.0, 20.0], [24000.0, 20.0], [25000.0, 23.0], [26000.0, 17.0], [27000.0, 24.0], [28000.0, 23.0], [29000.0, 30.0], [30000.0, 19.5], [31000.0, 197.0], [2000.0, 29.0], [35000.0, 22.0], [37000.0, 31.0], [46000.0, 7.5], [3000.0, 25.0], [4000.0, 21.0], [5000.0, 19.0], [6000.0, 16.0], [7000.0, 15.0], [8000.0, 14.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9000.0, 0.0], [10000.0, 0.0], [11000.0, 0.0], [12000.0, 0.0], [3000.0, 0.0], [13000.0, 0.0], [14000.0, 0.0], [4000.0, 0.0], [1000.0, 0.0], [5000.0, 0.0], [6000.0, 0.0], [7000.0, 0.0], [8000.0, 0.0], [2000.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 46000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2295.5666666666666, "minX": 1.54054248E12, "maxY": 6907.65, "series": [{"data": [[1.54054302E12, 6777.566666666667], [1.54054284E12, 6907.65], [1.54054314E12, 4957.283333333334], [1.5405426E12, 6687.983333333334], [1.54054296E12, 6695.65], [1.54054278E12, 6876.9], [1.54054248E12, 2295.5666666666666], [1.54054308E12, 6749.116666666667], [1.54054266E12, 6776.666666666667], [1.5405429E12, 6877.033333333334], [1.54054272E12, 6715.866666666667], [1.54054254E12, 6682.716666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54054314E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.54054248E12, "maxY": 6907.516666666666, "series": [{"data": [[1.54054302E12, 6777.4], [1.54054284E12, 6907.516666666666], [1.54054314E12, 4962.033333333334], [1.5405426E12, 6687.866666666667], [1.54054296E12, 6695.466666666666], [1.54054278E12, 6876.783333333334], [1.54054248E12, 2290.6], [1.54054308E12, 6748.8], [1.54054266E12, 6776.583333333333], [1.5405429E12, 6876.916666666667], [1.54054272E12, 6715.783333333334], [1.54054254E12, 6682.583333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.54054302E12, 0.21666666666666667], [1.54054284E12, 0.11666666666666667], [1.54054314E12, 0.2], [1.5405426E12, 0.11666666666666667], [1.54054296E12, 0.11666666666666667], [1.54054278E12, 0.06666666666666667], [1.54054248E12, 0.03333333333333333], [1.54054308E12, 0.25], [1.54054266E12, 0.08333333333333333], [1.5405429E12, 0.25], [1.54054272E12, 0.15], [1.54054254E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54054314E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.54054248E12, "maxY": 6907.516666666666, "series": [{"data": [[1.54054302E12, 6777.4], [1.54054284E12, 6907.516666666666], [1.54054314E12, 4962.033333333334], [1.5405426E12, 6687.866666666667], [1.54054296E12, 6695.466666666666], [1.54054278E12, 6876.783333333334], [1.54054248E12, 2290.6], [1.54054308E12, 6748.8], [1.54054266E12, 6776.583333333333], [1.5405429E12, 6876.916666666667], [1.54054272E12, 6715.783333333334], [1.54054254E12, 6682.583333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.54054302E12, 0.21666666666666667], [1.54054284E12, 0.11666666666666667], [1.54054314E12, 0.2], [1.5405426E12, 0.11666666666666667], [1.54054296E12, 0.11666666666666667], [1.54054278E12, 0.06666666666666667], [1.54054248E12, 0.03333333333333333], [1.54054308E12, 0.25], [1.54054266E12, 0.08333333333333333], [1.5405429E12, 0.25], [1.54054272E12, 0.15], [1.54054254E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54054314E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.54054248E12, "maxY": 6907.516666666666, "series": [{"data": [[1.54054302E12, 6777.4], [1.54054284E12, 6907.516666666666], [1.54054314E12, 4962.033333333334], [1.5405426E12, 6687.866666666667], [1.54054296E12, 6695.466666666666], [1.54054278E12, 6876.783333333334], [1.54054248E12, 2290.6], [1.54054308E12, 6748.8], [1.54054266E12, 6776.583333333333], [1.5405429E12, 6876.916666666667], [1.54054272E12, 6715.783333333334], [1.54054254E12, 6682.583333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.54054302E12, 0.21666666666666667], [1.54054284E12, 0.11666666666666667], [1.54054314E12, 0.2], [1.5405426E12, 0.11666666666666667], [1.54054296E12, 0.11666666666666667], [1.54054278E12, 0.06666666666666667], [1.54054248E12, 0.03333333333333333], [1.54054308E12, 0.25], [1.54054266E12, 0.08333333333333333], [1.5405429E12, 0.25], [1.54054272E12, 0.15], [1.54054254E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54054314E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

